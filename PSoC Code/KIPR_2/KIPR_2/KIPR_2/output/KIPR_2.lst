FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 0D 9E LJMP  _encoder2_ISR      (0145)     ljmp _encoder2_ISR
001F: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 0D 4A LJMP  _encoder1_ISR      (0149)     ljmp _encoder1_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 08 66 LJMP  _ServoA_ISR        (0157)     ljmp	_ServoA_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 09 0A LJMP  _PWMA_ISR          (0161)     ljmp	_PWMA_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
0030: 7D 0D 4A LJMP  _encoder1_ISR      (0165)     ljmp _encoder1_ISR
0033: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
0034: 7D 0D 4A LJMP  _encoder1_ISR      (0169)     ljmp _encoder1_ISR
0037: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
0038: 7D 06 07 LJMP  _UART_TX_ISR       (0173)     ljmp	_UART_TX_ISR
003B: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
003C: 7D 06 08 LJMP  _UART_RX_ISR       (0177)     ljmp	_UART_RX_ISR
003F: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
0040: 7D 08 C3 LJMP  _PWMB_ISR          (0181)     ljmp	_PWMB_ISR
0043: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
0044: 7D 09 61 LJMP  _ENC1B_FEDGE_ISR   (0185)     ljmp	_ENC1B_FEDGE_ISR
0047: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
0054: 7D 0D 4A LJMP  _encoder1_ISR      (0201)     ljmp _encoder1_ISR
0057: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [prevPrt1+207],0x0 (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [prevPrt1+208],0x0 (0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 05 A5 LCALL 0x05A5             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 04    MOV   A,0x4              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 9E    MOV   X,0x9E             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 1A    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 1A    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 1A    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 19    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 1A    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 1A FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 19    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 19    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 1A    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 1A FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 19    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
0129: 43 E3 20 OR    REG[0xE3],0x20     (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
012C: 70 EF    AND   F,0xEF             
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012E: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
0131: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0133: 62 E0 03 MOV   REG[0xE0],0x3      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0136: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0139: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
013B: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013E: 7C 09 E2 LCALL __UserModules_end|_main|__text_start|_main(0674)     lcall _main                    ; call main
                                        (0675) .Exit:
0141: 8F FF    JMP   0x0141             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0143: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0145: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
04A0: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_kipr_2_Bank1
                                        (0019) export LoadConfigTBL_kipr_2_Bank0
                                        (0020) export LoadConfigTBL_kipr_2_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_kipr_2_Bank0:
                                        (0023) ;  Instance name ENC1A_FEDGE, User Module DigInv
                                        (0024) ;       Instance name ENC1A_FEDGE, Block Name DigInv(DBB10)
                                        (0025) 	db		33h, 00h		;ENC1A_FEDGE_CONTROL_REG(DBB10CR0)
                                        (0026) 	db		31h, 00h		;ENC1A_FEDGE_PERIOD_REG (DBB10DR1)
                                        (0027) 	db		32h, 00h		;ENC1A_FEDGE_COMPARE_REG(DBB10DR2)
                                        (0028) ;  Instance name ENC1A_PEDGE, User Module DigBuf
                                        (0029) ;       Instance name ENC1A_PEDGE, Block Name DigBuf(DBB00)
                                        (0030) 	db		23h, 03h		;ENC1A_PEDGE_CONTROL_REG(DBB00CR0)
                                        (0031) 	db		21h, 00h		;ENC1A_PEDGE_DATA_1_REG(DBB00DR1)
                                        (0032) 	db		22h, 00h		;ENC1A_PEDGE_DATA_2_REG(DBB00DR2)
                                        (0033) ;  Instance name ENC1B_FEDGE, User Module DigInv
                                        (0034) ;       Instance name ENC1B_FEDGE, Block Name DigInv(DBB21)
                                        (0035) 	db		47h, 00h		;ENC1B_FEDGE_CONTROL_REG(DBB21CR0)
                                        (0036) 	db		45h, 00h		;ENC1B_FEDGE_PERIOD_REG (DBB21DR1)
                                        (0037) 	db		46h, 00h		;ENC1B_FEDGE_COMPARE_REG(DBB21DR2)
                                        (0038) ;  Instance name ENC1B_PEDGE, User Module DigBuf
                                        (0039) ;       Instance name ENC1B_PEDGE, Block Name DigBuf(DBB11)
                                        (0040) 	db		37h, 03h		;ENC1B_PEDGE_CONTROL_REG(DBB11CR0)
                                        (0041) 	db		35h, 00h		;ENC1B_PEDGE_DATA_1_REG(DBB11DR1)
                                        (0042) 	db		36h, 00h		;ENC1B_PEDGE_DATA_2_REG(DBB11DR2)
                                        (0043) ;  Instance name PWMA, User Module PWM8
                                        (0044) ;       Instance name PWMA, Block Name PWM8(DCB03)
                                        (0045) 	db		2fh, 00h		;PWMA_CONTROL_REG(DCB03CR0)
                                        (0046) 	db		2dh, ffh		;PWMA_PERIOD_REG(DCB03DR1)
                                        (0047) 	db		2eh, 00h		;PWMA_COMPARE_REG(DCB03DR2)
                                        (0048) ;  Instance name PWMB, User Module PWM8
                                        (0049) ;       Instance name PWMB, Block Name PWM8(DBB20)
                                        (0050) 	db		43h, 00h		;PWMB_CONTROL_REG(DBB20CR0)
                                        (0051) 	db		41h, ffh		;PWMB_PERIOD_REG(DBB20DR1)
                                        (0052) 	db		42h, 00h		;PWMB_COMPARE_REG(DBB20DR2)
                                        (0053) ;  Instance name ServoA, User Module PWM16
                                        (0054) ;       Instance name ServoA, Block Name PWM16_LSB(DBB01)
                                        (0055) 	db		27h, 00h		;ServoA_CONTROL_LSB_REG(DBB01CR0)
                                        (0056) 	db		25h, 1fh		;ServoA_PERIOD_LSB_REG(DBB01DR1)
                                        (0057) 	db		26h, e7h		;ServoA_COMPARE_LSB_REG(DBB01DR2)
                                        (0058) ;       Instance name ServoA, Block Name PWM16_MSB(DCB02)
                                        (0059) 	db		2bh, 00h		;ServoA_CONTROL_MSB_REG(DCB02CR0)
                                        (0060) 	db		29h, 4eh		;ServoA_PERIOD_MSB_REG(DCB02DR1)
                                        (0061) 	db		2ah, 03h		;ServoA_COMPARE_MSB_REG(DCB02DR2)
                                        (0062) ;  Instance name UART, User Module UART
                                        (0063) ;       Instance name UART, Block Name RX(DCB13)
                                        (0064) 	db		3fh, 00h		;UART_RX_CONTROL_REG(DCB13CR0)
                                        (0065) 	db		3dh, 00h		;UART_(DCB13DR1)
                                        (0066) 	db		3eh, 00h		;UART_RX_BUFFER_REG (DCB13DR2)
                                        (0067) ;       Instance name UART, Block Name TX(DCB12)
                                        (0068) 	db		3bh, 00h		;UART_TX_CONTROL_REG(DCB12CR0)
                                        (0069) 	db		39h, 00h		;UART_TX_BUFFER_REG (DCB12DR1)
                                        (0070) 	db		3ah, 00h		;UART_(DCB12DR2)
                                        (0071) ;  Global Register values Bank 0
                                        (0072) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0073) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0074) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0075) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0076) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0077) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0078) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0079) 	db		b0h, 10h		; Row_0_InputMux register (RDI0RI)
                                        (0080) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0081) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0082) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0083) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0084) 	db		b5h, 01h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0085) 	db		b6h, 10h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0086) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0087) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0088) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0089) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0090) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0091) 	db		bdh, 10h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0092) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0093) 	db		c0h, 01h		; Row_2_InputMux register (RDI2RI)
                                        (0094) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0095) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0096) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0097) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0098) 	db		c5h, 80h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0099) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0100) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0101) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0102) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0103) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0104) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0105) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0106) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0107) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0108) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0109) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0110) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0111) 	db		ffh
                                        (0112) LoadConfigTBL_kipr_2_Bank1:
                                        (0113) ;  Instance name ENC1A_FEDGE, User Module DigInv
                                        (0114) ;       Instance name ENC1A_FEDGE, Block Name DigInv(DBB10)
                                        (0115) 	db		30h, 20h		;ENC1A_FEDGE_FUNC_REG   (DBB10FN)
                                        (0116) 	db		31h, 0eh		;ENC1A_FEDGE_INPUT_REG  (DBB10IN)
                                        (0117) 	db		32h, 40h		;ENC1A_FEDGE_OUTPUT_REG (DBB10OU)
                                        (0118) ;  Instance name ENC1A_PEDGE, User Module DigBuf
                                        (0119) ;       Instance name ENC1A_PEDGE, Block Name DigBuf(DBB00)
                                        (0120) 	db		20h, 22h		;ENC1A_PEDGE_FUNC_REG(DBB00FN)
                                        (0121) 	db		21h, e0h		;ENC1A_PEDGE_INPUT_REG(DBB00IN)
                                        (0122) 	db		22h, 40h		;ENC1A_PEDGE_OUTPUT_REG(DBB00OU)
                                        (0123) ;  Instance name ENC1B_FEDGE, User Module DigInv
                                        (0124) ;       Instance name ENC1B_FEDGE, Block Name DigInv(DBB21)
                                        (0125) 	db		44h, 20h		;ENC1B_FEDGE_FUNC_REG   (DBB21FN)
                                        (0126) 	db		45h, 0ch		;ENC1B_FEDGE_INPUT_REG  (DBB21IN)
                                        (0127) 	db		46h, 40h		;ENC1B_FEDGE_OUTPUT_REG (DBB21OU)
                                        (0128) ;  Instance name ENC1B_PEDGE, User Module DigBuf
                                        (0129) ;       Instance name ENC1B_PEDGE, Block Name DigBuf(DBB11)
                                        (0130) 	db		34h, 22h		;ENC1B_PEDGE_FUNC_REG(DBB11FN)
                                        (0131) 	db		35h, c0h		;ENC1B_PEDGE_INPUT_REG(DBB11IN)
                                        (0132) 	db		36h, 40h		;ENC1B_PEDGE_OUTPUT_REG(DBB11OU)
                                        (0133) ;  Instance name PWMA, User Module PWM8
                                        (0134) ;       Instance name PWMA, Block Name PWM8(DCB03)
                                        (0135) 	db		2ch, 21h		;PWMA_FUNC_REG(DCB03FN)
                                        (0136) 	db		2dh, 16h		;PWMA_INPUT_REG(DCB03IN)
                                        (0137) 	db		2eh, 44h		;PWMA_OUTPUT_REG(DCB03OU)
                                        (0138) ;  Instance name PWMB, User Module PWM8
                                        (0139) ;       Instance name PWMB, Block Name PWM8(DBB20)
                                        (0140) 	db		40h, 21h		;PWMB_FUNC_REG(DBB20FN)
                                        (0141) 	db		41h, 11h		;PWMB_INPUT_REG(DBA20IN)
                                        (0142) 	db		42h, 45h		;PWMB_OUTPUT_REG(DBA20OU)
                                        (0143) ;  Instance name ServoA, User Module PWM16
                                        (0144) ;       Instance name ServoA, Block Name PWM16_LSB(DBB01)
                                        (0145) 	db		24h, 01h		;ServoA_FUNC_LSB_REG(DBB01FN)
                                        (0146) 	db		25h, 16h		;ServoA_INPUT_LSB_REG(DBB01IN)
                                        (0147) 	db		26h, 40h		;ServoA_OUTPUT_LSB_REG(DBB01OU)
                                        (0148) ;       Instance name ServoA, Block Name PWM16_MSB(DCB02)
                                        (0149) 	db		28h, 21h		;ServoA_FUNC_MSB_REG(DCB02FN)
                                        (0150) 	db		29h, 36h		;ServoA_INPUT_MSB_REG(DCB02IN)
                                        (0151) 	db		2ah, 47h		;ServoA_OUTPUT_MSB_REG(DCB02OU)
                                        (0152) ;  Instance name UART, User Module UART
                                        (0153) ;       Instance name UART, Block Name RX(DCB13)
                                        (0154) 	db		3ch, 05h		;UART_RX_FUNC_REG   (DCB13FN)
                                        (0155) 	db		3dh, f1h		;UART_RX_INPUT_REG  (DCB13IN)
                                        (0156) 	db		3eh, 40h		;UART_RX_OUTPUT_REG (DCB13OU)
                                        (0157) ;       Instance name UART, Block Name TX(DCB12)
                                        (0158) 	db		38h, 0dh		;UART_TX_FUNC_REG   (DCB12FN)
                                        (0159) 	db		39h, 01h		;UART_TX_INPUT_REG  (DCB12IN)
                                        (0160) 	db		3ah, 45h		;UART_TX_OUTPUT_REG (DCB12OU)
                                        (0161) ;  Global Register values Bank 1
                                        (0162) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0163) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0164) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0165) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0166) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0167) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0168) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0169) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0170) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0171) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0172) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0173) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0174) 	db		e1h, b1h		; OscillatorControl_1 register (OSC_CR1)
                                        (0175) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0176) 	db		dfh, 19h		; OscillatorControl_3 register (OSC_CR3)
                                        (0177) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0178) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0179) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0180) 	db		ffh
                                        (0181) AREA psoc_config(rom, rel)
                                        (0182) LoadConfigTBL_kipr_2_Ordered:
                                        (0183) ;  Ordered Global Register values
                                        (0184) 	M8C_SetBank0
04A2: 62 00 00 MOV   REG[0x0],0x0       (0185) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
04A5: 71 10    OR    F,0x10             
                                        (0186) 	M8C_SetBank1
04A7: 62 00 0A MOV   REG[0x0],0xA       (0187) 	mov	reg[00h], 0ah		; Port_0_DriveMode_0 register (PRT0DM0)
04AA: 62 01 F5 MOV   REG[0x1],0xF5      (0188) 	mov	reg[01h], f5h		; Port_0_DriveMode_1 register (PRT0DM1)
04AD: 70 EF    AND   F,0xEF             
                                        (0189) 	M8C_SetBank0
04AF: 62 03 F5 MOV   REG[0x3],0xF5      (0190) 	mov	reg[03h], f5h		; Port_0_DriveMode_2 register (PRT0DM2)
04B2: 62 02 0A MOV   REG[0x2],0xA       (0191) 	mov	reg[02h], 0ah		; Port_0_GlobalSelect register (PRT0GS)
04B5: 71 10    OR    F,0x10             
                                        (0192) 	M8C_SetBank1
04B7: 62 02 00 MOV   REG[0x2],0x0       (0193) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
04BA: 62 03 00 MOV   REG[0x3],0x0       (0194) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
04BD: 70 EF    AND   F,0xEF             
                                        (0195) 	M8C_SetBank0
04BF: 62 01 00 MOV   REG[0x1],0x0       (0196) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
04C2: 62 04 00 MOV   REG[0x4],0x0       (0197) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
04C5: 71 10    OR    F,0x10             
                                        (0198) 	M8C_SetBank1
04C7: 62 04 F0 MOV   REG[0x4],0xF0      (0199) 	mov	reg[04h], f0h		; Port_1_DriveMode_0 register (PRT1DM0)
04CA: 62 05 0F MOV   REG[0x5],0xF       (0200) 	mov	reg[05h], 0fh		; Port_1_DriveMode_1 register (PRT1DM1)
04CD: 70 EF    AND   F,0xEF             
                                        (0201) 	M8C_SetBank0
04CF: 62 07 0F MOV   REG[0x7],0xF       (0202) 	mov	reg[07h], 0fh		; Port_1_DriveMode_2 register (PRT1DM2)
04D2: 62 06 20 MOV   REG[0x6],0x20      (0203) 	mov	reg[06h], 20h		; Port_1_GlobalSelect register (PRT1GS)
04D5: 71 10    OR    F,0x10             
                                        (0204) 	M8C_SetBank1
04D7: 62 06 00 MOV   REG[0x6],0x0       (0205) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
04DA: 62 07 00 MOV   REG[0x7],0x0       (0206) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
04DD: 70 EF    AND   F,0xEF             
                                        (0207) 	M8C_SetBank0
04DF: 62 05 00 MOV   REG[0x5],0x0       (0208) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
04E2: 62 08 00 MOV   REG[0x8],0x0       (0209) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
04E5: 71 10    OR    F,0x10             
                                        (0210) 	M8C_SetBank1
04E7: 62 08 07 MOV   REG[0x8],0x7       (0211) 	mov	reg[08h], 07h		; Port_2_DriveMode_0 register (PRT2DM0)
04EA: 62 09 F8 MOV   REG[0x9],0xF8      (0212) 	mov	reg[09h], f8h		; Port_2_DriveMode_1 register (PRT2DM1)
04ED: 70 EF    AND   F,0xEF             
                                        (0213) 	M8C_SetBank0
04EF: 62 0B 08 MOV   REG[0xB],0x8       (0214) 	mov	reg[0bh], 08h		; Port_2_DriveMode_2 register (PRT2DM2)
04F2: 62 0A D1 MOV   REG[0xA],0xD1      (0215) 	mov	reg[0ah], d1h		; Port_2_GlobalSelect register (PRT2GS)
04F5: 71 10    OR    F,0x10             
                                        (0216) 	M8C_SetBank1
04F7: 62 0A 28 MOV   REG[0xA],0x28      (0217) 	mov	reg[0ah], 28h		; Port_2_IntCtrl_0 register (PRT2IC0)
04FA: 62 0B 28 MOV   REG[0xB],0x28      (0218) 	mov	reg[0bh], 28h		; Port_2_IntCtrl_1 register (PRT2IC1)
04FD: 70 EF    AND   F,0xEF             
                                        (0219) 	M8C_SetBank0
04FF: 62 09 28 MOV   REG[0x9],0x28      (0220) 	mov	reg[09h], 28h		; Port_2_IntEn register (PRT2IE)
0502: 62 0C 00 MOV   REG[0xC],0x0       (0221) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0505: 71 10    OR    F,0x10             
                                        (0222) 	M8C_SetBank1
0507: 62 0C 00 MOV   REG[0xC],0x0       (0223) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
050A: 62 0D 00 MOV   REG[0xD],0x0       (0224) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
050D: 70 EF    AND   F,0xEF             
                                        (0225) 	M8C_SetBank0
050F: 62 0F 00 MOV   REG[0xF],0x0       (0226) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0512: 62 0E 00 MOV   REG[0xE],0x0       (0227) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0515: 71 10    OR    F,0x10             
                                        (0228) 	M8C_SetBank1
0517: 62 0E 00 MOV   REG[0xE],0x0       (0229) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
051A: 62 0F 00 MOV   REG[0xF],0x0       (0230) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
051D: 70 EF    AND   F,0xEF             
                                        (0231) 	M8C_SetBank0
051F: 62 0D 00 MOV   REG[0xD],0x0       (0232) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0522: 62 10 00 MOV   REG[0x10],0x0      (0233) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0525: 71 10    OR    F,0x10             
                                        (0234) 	M8C_SetBank1
0527: 62 10 00 MOV   REG[0x10],0x0      (0235) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
052A: 62 11 00 MOV   REG[0x11],0x0      (0236) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
052D: 70 EF    AND   F,0xEF             
                                        (0237) 	M8C_SetBank0
052F: 62 13 00 MOV   REG[0x13],0x0      (0238) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0532: 62 12 00 MOV   REG[0x12],0x0      (0239) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0535: 71 10    OR    F,0x10             
                                        (0240) 	M8C_SetBank1
0537: 62 12 00 MOV   REG[0x12],0x0      (0241) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
053A: 62 13 00 MOV   REG[0x13],0x0      (0242) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
053D: 70 EF    AND   F,0xEF             
                                        (0243) 	M8C_SetBank0
053F: 62 11 00 MOV   REG[0x11],0x0      (0244) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0542: 62 14 00 MOV   REG[0x14],0x0      (0245) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0545: 71 10    OR    F,0x10             
                                        (0246) 	M8C_SetBank1
0547: 62 14 00 MOV   REG[0x14],0x0      (0247) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
054A: 62 15 00 MOV   REG[0x15],0x0      (0248) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
054D: 70 EF    AND   F,0xEF             
                                        (0249) 	M8C_SetBank0
054F: 62 17 00 MOV   REG[0x17],0x0      (0250) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0552: 62 16 00 MOV   REG[0x16],0x0      (0251) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0555: 71 10    OR    F,0x10             
                                        (0252) 	M8C_SetBank1
0557: 62 16 00 MOV   REG[0x16],0x0      (0253) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
055A: 62 17 00 MOV   REG[0x17],0x0      (0254) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
055D: 70 EF    AND   F,0xEF             
                                        (0255) 	M8C_SetBank0
055F: 62 15 00 MOV   REG[0x15],0x0      (0256) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0562: 62 18 00 MOV   REG[0x18],0x0      (0257) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
0565: 71 10    OR    F,0x10             
                                        (0258) 	M8C_SetBank1
0567: 62 18 00 MOV   REG[0x18],0x0      (0259) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
056A: 62 19 00 MOV   REG[0x19],0x0      (0260) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
056D: 70 EF    AND   F,0xEF             
                                        (0261) 	M8C_SetBank0
056F: 62 1B 00 MOV   REG[0x1B],0x0      (0262) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0572: 62 1A 00 MOV   REG[0x1A],0x0      (0263) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0575: 71 10    OR    F,0x10             
                                        (0264) 	M8C_SetBank1
0577: 62 1A 00 MOV   REG[0x1A],0x0      (0265) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
057A: 62 1B 00 MOV   REG[0x1B],0x0      (0266) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
057D: 70 EF    AND   F,0xEF             
                                        (0267) 	M8C_SetBank0
057F: 62 19 00 MOV   REG[0x19],0x0      (0268) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0582: 62 1C 00 MOV   REG[0x1C],0x0      (0269) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0585: 71 10    OR    F,0x10             
                                        (0270) 	M8C_SetBank1
0587: 62 1C 00 MOV   REG[0x1C],0x0      (0271) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
058A: 62 1D 00 MOV   REG[0x1D],0x0      (0272) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
058D: 70 EF    AND   F,0xEF             
                                        (0273) 	M8C_SetBank0
058F: 62 1F 00 MOV   REG[0x1F],0x0      (0274) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0592: 62 1E 00 MOV   REG[0x1E],0x0      (0275) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0595: 71 10    OR    F,0x10             
                                        (0276) 	M8C_SetBank1
0597: 62 1E 00 MOV   REG[0x1E],0x0      (0277) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
059A: 62 1F 00 MOV   REG[0x1F],0x0      (0278) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
059D: 70 EF    AND   F,0xEF             
                                        (0279) 	M8C_SetBank0
059F: 62 1D 00 MOV   REG[0x1D],0x0      (0280) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
05A2: 70 EF    AND   F,0xEF             
                                        (0281) 	M8C_SetBank0
05A4: 7F       RET                      (0282) 	ret
                                        (0283) 
                                        (0284) 
                                        (0285) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_kipr_2
                                        (0026) export _LoadConfig_kipr_2
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     
05A5: 7C 05 AC LCALL 0x05AC             (0058) 	lcall	LoadConfig_kipr_2
05A8: 7C 04 A0 LCALL 0x04A0             (0059) 	lcall	LoadConfigTBL_kipr_2_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
05AB: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration kipr_2
                                        (0067) ;
                                        (0068) ;    Load configuration registers for kipr_2.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_kipr_2:
                                        (0085)  LoadConfig_kipr_2:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
05AC: 10       PUSH  X                  (0088) 	push	x
05AD: 70 EF    AND   F,0xEF             
                                        (0089)     M8C_SetBank0                    ; Force bank 0
05AF: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
05B1: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
05B2: 50 02    MOV   A,0x2              (0093)     mov     A, >LoadConfigTBL_kipr_2_Bank0
05B4: 57 B1    MOV   X,0xB1             (0094)     mov     X, <LoadConfigTBL_kipr_2_Bank0
05B6: 7C 05 C7 LCALL 0x05C7             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
05B9: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
05BB: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
05BC: 50 03    MOV   A,0x3              (0100)     mov     A, >LoadConfigTBL_kipr_2_Bank1
05BE: 57 3C    MOV   X,0x3C             (0101)     mov     X, <LoadConfigTBL_kipr_2_Bank1
05C0: 7C 05 C7 LCALL 0x05C7             (0102)     lcall   LoadConfig              ; Load the bank 1 values
05C3: 70 EF    AND   F,0xEF             
                                        (0103) 
                                        (0104)     M8C_SetBank0                    ; Force return to bank 0
05C5: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
05C6: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
05C7: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
05C9: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
05CA: 08       PUSH  A                  (0132)     push    A
05CB: 4F       MOV   X,SP               (0133)     mov     X, SP
05CC: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
05CF: D0 04    JNC   0x05D4             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
05D1: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
05D4: 18       POP   A                  (0138)     pop     A
05D5: 20       POP   X                  (0139)     pop     X
05D6: 70 EF    AND   F,0xEF             
05D8: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0140) 
                                        (0141) LoadConfigLp:
                                        (0142)     M8C_SetBank0                    ; Switch to bank 0
                                        (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
05DB: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
05DC: 08       PUSH  A                  (0145)     push    A
05DD: 28       ROMX                     (0146)     romx                            ; Load register address from table
05DE: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
05E0: A0 1F    JZ    0x0600             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
05E2: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
05E3: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
05E6: A0 03    JZ    0x05EA             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
05E8: 71 10    OR    F,0x10             
                                        (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
05EA: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
05EC: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
05ED: 20       POP   X                  (0156)     pop     X
05EE: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
05EF: 09 00    ADC   A,0x0              (0158)     adc     A, 0
05F1: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
05F2: 08       PUSH  A                  (0160)     push    A
05F3: 28       ROMX                     (0161)     romx                            ; load config data from the table
05F4: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
05F5: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
05F7: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
05F9: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
05FA: 20       POP   X                  (0166)     pop     X
05FB: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
05FC: 09 00    ADC   A,0x0              (0168)     adc     A, 0
05FE: 8F D7    JMP   0x05D6             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
0600: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
0602: 70 3F    AND   F,0x3F             
0604: 71 C0    OR    F,0xC0             
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
0606: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175) AREA InterruptRAM(ram, rel)
                                        (0176) 
                                        (0177) NO_SHADOW:
                                        (0178) _NO_SHADOW:
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
0607: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
0608: 08       PUSH  A                  (0180)    push A
0609: 10       PUSH  X                  (0181)    push X
060A: 5D D3    MOV   A,REG[0xD3]        
060C: 08       PUSH  A                  
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
060D: 58 01    MOV   X,[0x1]            (0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
060F: 5D 3F    MOV   A,REG[0x3F]        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
0611: 08       PUSH  A                  (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
0612: 21 08    AND   A,0x8              (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
0614: B0 04    JNZ   0x0619             (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
0616: 18       POP   A                  (0193)    pop  A                                                  ; Restore stack
0617: 80 5E    JMP   0x0676             (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
0619: 18       POP   A                  (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
061A: 21 E0    AND   A,0xE0             (0200)    and  A,UART_RX_ERROR
061C: A0 12    JZ    0x062F             (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
061E: 2C 00    OR    [0x0],A            (0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
0620: 49 3E 00 TST   REG[0x3E],0x0      (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
0623: 21 20    AND   A,0x20             (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
0625: A0 50    JZ    0x0676             (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
0627: 41 3F FE AND   REG[0x3F],0xFE     (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
062A: 43 3F 01 OR    REG[0x3F],0x1      (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
062D: 80 48    JMP   0x0676             (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
062F: 5D 3E    MOV   A,REG[0x3E]        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
0631: 47 00 01 TST   [0x0],0x1          (0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
0634: B0 41    JNZ   0x0676             (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
0636: 39 07    CMP   A,0x7              (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
0638: B0 14    JNZ   0x064D             (0223)    jnz  .UARTRX_CHK_BACKSPACE
063A: 2E 00 01 OR    [0x0],0x1          (0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
063D: 62 D3 00 MOV   REG[0xD3],0x0      
0640: 70 3F    AND   F,0x3F             
0642: 71 80    OR    F,0x80             
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0644: 56 02 00 MOV   [X+2],0x0          (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
0647: 70 3F    AND   F,0x3F             
0649: 71 00    OR    F,0x0              
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
064B: 80 2A    JMP   0x0676             (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
064D: 39 20    CMP   A,0x20             (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
064F: C0 26    JC    0x0676             (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
0651: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
0654: 3C 01 0F CMP   [0x1],0xF          (0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
0657: C0 11    JC    0x0669             (0254)    jc   .UARTRX_ISR_GETDATA
0659: 70 3F    AND   F,0x3F             
065B: 71 80    OR    F,0x80             
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
065D: 56 02 00 MOV   [X+2],0x0          (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
0660: 70 3F    AND   F,0x3F             
0662: 71 00    OR    F,0x0              
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0664: 2E 00 10 OR    [0x0],0x10         (0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
0667: 80 0E    JMP   0x0676             (0259)    jmp  .RESTORE_IDX_PP
0669: 70 3F    AND   F,0x3F             
066B: 71 80    OR    F,0x80             
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
066D: 54 02    MOV   [X+2],A            (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
066F: 70 3F    AND   F,0x3F             
0671: 71 00    OR    F,0x0              
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0673: 75       INC   X                  (0266)    inc  X                                                  ; Inc the pointer
0674: 5A 01    MOV   [0x1],X            (0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
0676: 18       POP   A                  
0677: 60 D3    MOV   REG[0xD3],A        
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
0679: 20       POP   X                  (0275)    pop  X
067A: 18       POP   A                  (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
067B: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
067C: 43 E1 40 OR    REG[0xE1],0x40     (0002) ;;*****************************************************************************
067F: 43 E1 80 OR    REG[0xE1],0x80     
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
0682: 7F       RET                      (0182)    ret
0683: 41 E1 BF AND   REG[0xE1],0xBF     
0686: 41 E1 7F AND   REG[0xE1],0x7F     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
0689: 7F       RET                      (0214)    ret
068A: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
068C: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
068E: A0 07    JZ    0x0696             (0249)    jz    .SetModeRegEmpty
0690: 43 38 10 OR    REG[0x38],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
0693: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
0695: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
0696: 41 38 EF AND   REG[0x38],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
0699: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
069B: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
069C: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
069E: 60 3B    MOV   REG[0x3B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
06A0: 60 3F    MOV   REG[0x3F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
06A2: 91 2A    CALL  _UART_CmdReset     (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
06A4: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
06A5: 41 3B FE AND   REG[0x3B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
06A8: 41 3F FE AND   REG[0x3F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
06AB: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
06AC: 60 39    MOV   REG[0x39],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
06AE: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
06AF: 5D 3B    MOV   A,REG[0x3B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
06B1: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
06B2: 5D 3E    MOV   A,REG[0x3E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
06B4: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
06B5: 5D 3F    MOV   A,REG[0x3F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
06B7: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
06B8: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
06BA: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
06BC: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
06BE: A0 06    JZ    0x06C5             (0492)    jz   .SetTxCmpMode
                                        (0493) 
06C0: 41 38 EF AND   REG[0x38],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
06C3: 80 04    JMP   0x06C8             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
06C5: 43 38 10 OR    REG[0x38],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
06C8: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
06CA: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
06CB: 08       PUSH  A                  (0536)    push A
06CC: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
06CE: A0 06    JZ    0x06D5             (0538)    jz   .DisRxInt
06D0: 43 E1 80 OR    REG[0xE1],0x80     
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
06D3: 80 04    JMP   0x06D8             (0541)    jmp  .CheckTxInt
06D5: 41 E1 7F AND   REG[0xE1],0x7F     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
06D8: 18       POP   A                  (0547)    pop  A
06D9: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
06DB: A0 06    JZ    0x06E2             (0549)    jz   .DisTxInt
06DD: 43 E1 40 OR    REG[0xE1],0x40     
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
06E0: 80 04    JMP   0x06E5             (0552)    jmp  .End_IntCntl
06E2: 41 E1 BF AND   REG[0xE1],0xBF     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
06E5: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
06F6: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
06F7: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
06F8: 67       ASR   A                  (0603)    asr   A
06F9: 67       ASR   A                  (0604)    asr   A
06FA: 67       ASR   A                  (0605)    asr   A
06FB: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
06FD: FF E7    INDEX 0x06E6             (0607)    index UART_HEX_STR                  ; Get Hex value
06FF: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
0701: 18       POP   A                  (0609)    pop   A                             ; Restore value
0702: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
0704: FF E0    INDEX 0x06E6             (0611)    index UART_HEX_STR                  ; Get Hex value
0706: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
0708: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
0709: 4B       SWAP  A,X                (0645)    swap  A,X
070A: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
070C: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
070D: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
070F: 7F       RET                      (0650)    ret
0710: 49 3B 10 TST   REG[0x3B],0x10     
0713: AF FC    JZ    _UART_PutChar      
0715: 60 39    MOV   REG[0x39],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
0717: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
0718: 49 3F 08 TST   REG[0x3F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
071B: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
071D: 5D 3E    MOV   A,REG[0x3E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
071F: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
0720: 5D 3F    MOV   A,REG[0x3F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
0722: 08       PUSH  A                  (0756)    push A
0723: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0725: B0 04    JNZ   0x072A             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0727: 18       POP   A                  (0759)    pop  A
0728: 80 0B    JMP   0x0734             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
072A: 5D 3E    MOV   A,REG[0x3E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
072C: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
072D: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
072E: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
0730: B0 03    JNZ   0x0734             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
0732: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
0733: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
0734: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
0736: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
0737: 5D 3F    MOV   A,REG[0x3F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
0739: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
073B: 08       PUSH  A                  (0819)    push A
073C: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
073E: B0 07    JNZ   0x0746             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
0740: 18       POP   A                  (0822)    pop  A
0741: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
0743: 4B       SWAP  A,X                (0824)    swap A,X
0744: 80 07    JMP   0x074C             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
0746: 18       POP   A                  (0828)    pop  A
0747: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
0749: 4B       SWAP  A,X                (0830)    swap A,X
074A: 5D 3E    MOV   A,REG[0x3E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
074C: 7F       RET                      (0836)    ret
074D: 70 BF    AND   F,0xBF             
074F: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
0751: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
0753: A0 06    JZ    0x075A             (0872)    jz    End_PutString                           ; Check for end of string
0755: 9F B9    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
0757: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
0758: 8F F8    JMP   0x0751             (0875)    jmp   .PutStringLoop                          ; Get next character
075A: 70 3F    AND   F,0x3F             
075C: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
075E: 7F       RET                      (0879)    ret
075F: 70 BF    AND   F,0xBF             
0761: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
0764: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
0765: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
0767: A0 1A    JZ    0x0782             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
0769: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
076B: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
076D: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
076F: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
0771: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
0773: 49 3B 10 TST   REG[0x3B],0x10     
0776: AF FC    JZ    0x0773             
0778: 60 39    MOV   REG[0x39],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
077A: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
077B: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
077E: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
0780: 8F E4    JMP   0x0765             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
0782: 70 3F    AND   F,0x3F             
0784: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
0786: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
0787: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
0788: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
078B: B0 06    JNZ   0x0792             (0980)    jnz   .CW_WRITEIT
078D: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
0790: A0 1D    JZ    0x07AE             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
0792: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
0793: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
0795: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
0797: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
0798: 49 3B 10 TST   REG[0x3B],0x10     
079B: AF FC    JZ    0x0798             
079D: 60 39    MOV   REG[0x39],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
079F: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
07A0: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
07A3: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
07A6: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
07A9: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
07AC: 8F DB    JMP   0x0788             (0995)    jmp   .CW_Loop
07AE: 70 3F    AND   F,0x3F             
07B0: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
07B2: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
07B3: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
07B4: 10       PUSH  X                  (1030)    push  X
07B5: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
07B6: A0 0B    JZ    0x07C2             (1032)    jz    .End_CPutString
07B8: 9F 56    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
07BA: 20       POP   X                  (1034)    pop   X
07BB: 18       POP   A                  (1035)    pop   A
07BC: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
07BD: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
07BF: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
07C0: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
07C2: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
07C4: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
07C5: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
07C7: 9F 47    CALL  _UART_PutChar      (1074)    call UART_PutChar
07C9: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
07CB: 9F 43    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
07CD: 7F       RET                      (1078)    ret
07CE: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
07D1: 55 02 00 MOV   [0x2],0x0          (1122)    mov [UART_aRxBuffer], 0x00
07D4: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
07D7: 55 01 00 MOV   [0x1],0x0          (1124)    mov [UART_bRxCnt], 0x00
07DA: 26 00 00 AND   [0x0],0x0          (1125)    and [UART_fStatus], 0x00
07DD: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
07E0: 55 26 00 MOV   [curPrt1+1],0x0    (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
07E3: 7F       RET                      (1129)    ret
07E4: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
07E7: 51 00    MOV   A,[0x0]            (1165)    mov A,  [UART_fStatus]
07E9: 21 01    AND   A,0x1              (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
07EB: 7F       RET                      (1168)    ret
07EC: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
07EF: 51 00    MOV   A,[0x0]            (1209)    mov A,  [UART_fStatus]
07F1: 21 F0    AND   A,0xF0             (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
07F3: 26 00 0F AND   [0x0],0xF          (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
07F6: 7F       RET                      (1213)    ret
07F7: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
07FA: 51 01    MOV   A,[0x1]            (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
07FC: 7F       RET                      (1246)    ret
07FD: 70 BF    AND   F,0xBF             
07FF: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
0802: 50 02    MOV   A,0x2              (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
0804: 02 26    ADD   A,[curPrt1+1]      (1305)    add   A, [ptrParam]                      ; Add string offset
0806: 5C       MOV   X,A                (1306)    mov   X, A
0807: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
080A: 52 00    MOV   A,[X+0]            (1308)    mov   A, [X]                             ; Get character pointed by X
080C: B0 04    JNZ   0x0811             (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
080E: 10       PUSH  X                  (1310)    push  X                                  ;       Yes, Save LSB of current pointer
080F: 80 33    JMP   0x0843             (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
0811: 39 20    CMP   A,0x20             (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
0813: B0 11    JNZ   0x0825             (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
0815: 75       INC   X                  (1317)    inc   X                                  ;   Yes, Increment both index and...
0816: 76 26    INC   [curPrt1+1]        (1318)    inc   [ptrParam]                         ;          the stored pointer.
0818: 52 00    MOV   A,[X+0]            (1319)    mov   A, [X]                             ; Get character pointed by X
081A: 3C 26 0F CMP   [curPrt1+1],0xF    (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
081D: BF F3    JNZ   0x0811             (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
081F: 10       PUSH  X                  (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
0820: 56 00 00 MOV   [X+0],0x0          (1326)    mov   [X], 0x00                          ; Make sure string is zero
0823: 80 1F    JMP   0x0843             (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
0825: 10       PUSH  X                  (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
0826: 75       INC   X                  (1333)    inc   X                                  ; Advance pointers.
0827: 76 26    INC   [curPrt1+1]        (1334)    inc   [ptrParam]
0829: 3C 26 0F CMP   [curPrt1+1],0xF    (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
082C: AF F3    JZ    0x0820             (1336)    jz    .TerminateString
082E: 52 00    MOV   A,[X+0]            (1337)    mov   A, [X]                             ; Get next character
0830: A0 12    JZ    0x0843             (1338)    jz    .End_GetNextParam
0832: 39 20    CMP   A,0x20             (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
0834: BF F1    JNZ   0x0826             (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
0836: 56 00 00 MOV   [X+0],0x0          (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
0839: 76 26    INC   [curPrt1+1]        (1342)    inc   [ptrParam]
083B: 3C 26 0F CMP   [curPrt1+1],0xF    (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
083E: B0 04    JNZ   0x0843             (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
0840: 55 26 0F MOV   [curPrt1+1],0xF    (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
0843: 20       POP   X                  (1348)    pop   X
0844: 10       PUSH  X                  (1349)    push  X
0845: 3D 00 00 CMP   [X+0],0x0          (1350)    cmp   [X], 0x00
0848: B0 0A    JNZ   0x0853             (1351)    jnz   .NotNullString
084A: 20       POP   X                  (1352)    pop   X
084B: 57 00    MOV   X,0x0              (1353)    mov   X, 0x00
084D: 5B       MOV   A,X                (1354)    mov   A, X
084E: 70 3F    AND   F,0x3F             
0850: 71 C0    OR    F,0xC0             
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
0852: 7F       RET                      (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
0853: 20       POP   X                  (1360)    pop  X
0854: 50 00    MOV   A,0x0              (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
0856: 70 3F    AND   F,0x3F             
0858: 71 C0    OR    F,0xC0             
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
085A: 7F       RET                      (1364)    ret
085B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
085E: 50 02    MOV   A,0x2              (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
0860: 02 26    ADD   A,[curPrt1+1]      (1397)    add  A, [ptrParam]                       ; Add string offset
0862: 5C       MOV   X,A                (1398)    mov  X,A
0863: 50 00    MOV   A,0x0              (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
0865: 7F       RET                      (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\servoaint.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ServoAINT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "ServoA.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _ServoA_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _ServoA_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _ServoA_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0866: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file ServoAINT.asm
FILE: lib\servoa.asm                    (0001) ;;*****************************************************************************
0867: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ServoA.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "ServoA.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  ServoA_EnableInt
                                        (0030) export _ServoA_EnableInt
                                        (0031) export  ServoA_DisableInt
                                        (0032) export _ServoA_DisableInt
                                        (0033) export  ServoA_Start
                                        (0034) export _ServoA_Start
                                        (0035) export  ServoA_Stop
                                        (0036) export _ServoA_Stop
                                        (0037) export  ServoA_WritePeriod
                                        (0038) export _ServoA_WritePeriod
                                        (0039) export  ServoA_WritePulseWidth
                                        (0040) export _ServoA_WritePulseWidth
                                        (0041) export  ServoA_wReadPulseWidth
                                        (0042) export _ServoA_wReadPulseWidth
                                        (0043) export  ServoA_wReadCounter
                                        (0044) export _ServoA_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wServoA_ReadPulseWidth    ; deprecated
                                        (0049) export _wServoA_ReadPulseWidth    ; deprecated
                                        (0050) export  wServoA_ReadCounter       ; deprecated
                                        (0051) export _wServoA_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA kipr_2_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: ServoA_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  ServoA_EnableInt:
                                        (0091) _ServoA_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    ServoA_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
086A: 7F       RET                      (0095)    ret
086B: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: ServoA_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  ServoA_DisableInt:
                                        (0119) _ServoA_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    ServoA_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
086E: 7F       RET                      (0123)    ret
086F: 43 27 01 OR    REG[0x27],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: ServoA_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  ServoA_Start:
                                        (0148) _ServoA_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    ServoA_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0872: 7F       RET                      (0152)    ret
0873: 41 27 FE AND   REG[0x27],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: ServoA_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  ServoA_Stop:
                                        (0176) _ServoA_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    ServoA_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0876: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: ServoA_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  ServoA_WritePeriod:
                                        (0206) _ServoA_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0877: 60 25    MOV   REG[0x25],A        (0208)    mov   reg[ServoA_PERIOD_LSB_REG], A
0879: 5B       MOV   A,X                (0209)    mov   A, X
087A: 60 29    MOV   REG[0x29],A        (0210)    mov   reg[ServoA_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
087C: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: ServoA_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  ServoA_WritePulseWidth:
                                        (0235) _ServoA_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
087D: 60 26    MOV   REG[0x26],A        (0237)    mov   reg[ServoA_COMPARE_LSB_REG], A
087F: 5B       MOV   A,X                (0238)    mov   A, X
0880: 60 2A    MOV   REG[0x2A],A        (0239)    mov   reg[ServoA_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
0882: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: ServoA_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  ServoA_wReadPulseWidth:
                                        (0264) _ServoA_wReadPulseWidth:
                                        (0265)  wServoA_ReadPulseWidth:                         ; this name deprecated
                                        (0266) _wServoA_ReadPulseWidth:                         ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
0883: 5D 2A    MOV   A,REG[0x2A]        (0268)    mov   A, reg[ServoA_COMPARE_MSB_REG]
0885: 5C       MOV   X,A                (0269)    mov   X, A
0886: 5D 26    MOV   A,REG[0x26]        (0270)    mov   A, reg[ServoA_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
0888: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: ServoA_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  ServoA_wReadCounter:
                                        (0299) _ServoA_wReadCounter:
                                        (0300)  wServoA_ReadCounter:                            ; this name deprecated
                                        (0301) _wServoA_ReadCounter:                            ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
0889: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
088A: 5D 2A    MOV   A,REG[0x2A]        (0310)    mov   A, reg[ServoA_COMPARE_MSB_REG]          ; Save the Compare register on the stack
088C: 08       PUSH  A                  (0311)    push  A                                          ;
088D: 5D 26    MOV   A,REG[0x26]        (0312)    mov   A, reg[ServoA_COMPARE_LSB_REG]          ;
088F: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
0890: 41 27 FE AND   REG[0x27],0xFE     
0893: 71 10    OR    F,0x10             
                                        (0314)    ServoA_Stop_M                                 ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
0895: 5D 25    MOV   A,REG[0x25]        (0316)    mov   A, reg[ServoA_INPUT_LSB_REG]            ; save the LSB clock input setting
0897: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
0898: 62 25 00 MOV   REG[0x25],0x0      (0319)    mov   reg[ServoA_INPUT_LSB_REG], INPUT_REG_NULL
089B: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
089D: 5D 28    MOV   A,REG[0x28]        (0321)    mov   A, reg[ServoA_COUNTER_MSB_REG]          ; DR2 <- DR0 (in the MSB block)
089F: 5D 2A    MOV   A,REG[0x2A]        (0322)    mov   A, reg[ServoA_COMPARE_MSB_REG]          ; Stash the Count MSB on the stack
08A1: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
08A2: 5D 24    MOV   A,REG[0x24]        (0324)    mov   A, reg[ServoA_COUNTER_LSB_REG]          ; DR2 <- DR0 (in the LSB block)
08A4: 5D 26    MOV   A,REG[0x26]        (0325)    mov   A, reg[ServoA_COMPARE_LSB_REG]          ; Stash the Count LSB on the stack
08A6: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
08A7: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
08A9: 60 2A    MOV   REG[0x2A],A        (0328)    mov   reg[ServoA_COMPARE_MSB_REG], A          ;
08AB: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
08AD: 60 26    MOV   REG[0x26],A        (0330)    mov   reg[ServoA_COMPARE_LSB_REG], A          ;
08AF: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
08B1: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
08B3: 60 25    MOV   REG[0x25],A        (0333)    mov   reg[ServoA_INPUT_LSB_REG], A            ;    and restore it
08B5: 70 EF    AND   F,0xEF             
08B7: 43 27 01 OR    REG[0x27],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    ServoA_Start_M                                ; Now re-enable the PWM function
08BA: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
08BB: 20       POP   X                  (0337)    pop   X                                          ;
08BC: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
08BE: 70 3F    AND   F,0x3F             
08C0: 71 C0    OR    F,0xC0             
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
08C2: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File ServoA.asm
FILE: lib\pwmbint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWMBINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:26:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWMB.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWMB_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWMB_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWMB_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
08C3: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWMBINT.asm
FILE: lib\pwmb.asm                      (0001) ;;*****************************************************************************
08C4: 43 DF 01 OR    REG[0xDF],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWMB.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:26:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWMB.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWMB_EnableInt
                                        (0030) export _PWMB_EnableInt
                                        (0031) export  PWMB_DisableInt
                                        (0032) export _PWMB_DisableInt
                                        (0033) export  PWMB_Start
                                        (0034) export _PWMB_Start
                                        (0035) export  PWMB_Stop
                                        (0036) export _PWMB_Stop
                                        (0037) export  PWMB_WritePeriod
                                        (0038) export _PWMB_WritePeriod
                                        (0039) export  PWMB_WritePulseWidth
                                        (0040) export _PWMB_WritePulseWidth
                                        (0041) export  PWMB_bReadPulseWidth
                                        (0042) export _PWMB_bReadPulseWidth
                                        (0043) export  PWMB_bReadCounter
                                        (0044) export _PWMB_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWMB_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWMB_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWMB_ReadCounter       ; deprecated
                                        (0051) export _bPWMB_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA kipr_2_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWMB_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWMB_EnableInt:
                                        (0091) _PWMB_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWMB_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
08C7: 7F       RET                      (0095)    ret
08C8: 41 DF FE AND   REG[0xDF],0xFE     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWMB_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWMB_DisableInt:
                                        (0119) _PWMB_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWMB_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
08CB: 7F       RET                      (0123)    ret
08CC: 43 43 01 OR    REG[0x43],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWMB_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWMB_Start:
                                        (0148) _PWMB_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWMB_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
08CF: 7F       RET                      (0152)    ret
08D0: 41 43 FE AND   REG[0x43],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWMB_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWMB_Stop:
                                        (0176) _PWMB_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWMB_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
08D3: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWMB_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWMB_WritePeriod:
                                        (0206) _PWMB_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
08D4: 60 41    MOV   REG[0x41],A        (0208)    mov   reg[PWMB_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
08D6: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWMB_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWMB_WritePulseWidth:
                                        (0233) _PWMB_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
08D7: 60 42    MOV   REG[0x42],A        (0235)    mov   reg[PWMB_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
08D9: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWMB_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWMB_bReadPulseWidth:
                                        (0260) _PWMB_bReadPulseWidth:
                                        (0261)  bPWMB_ReadPulseWidth:                           ; this name deprecated
                                        (0262) _bPWMB_ReadPulseWidth:                           ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
08DA: 5D 42    MOV   A,REG[0x42]        (0264)    mov   A, reg[PWMB_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
08DC: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWMB_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWMB_bReadCounter:
                                        (0293) _PWMB_bReadCounter:
                                        (0294)  bPWMB_ReadCounter:                              ; this name deprecated
                                        (0295) _bPWMB_ReadCounter:                              ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
08DD: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
08DE: 5D 42    MOV   A,REG[0x42]        (0304)    mov   A, reg[PWMB_COMPARE_REG]                ; Save the Compare register on the stack
08E0: 08       PUSH  A                  (0305)    push  A                                       ;
08E1: 41 43 FE AND   REG[0x43],0xFE     
08E4: 71 10    OR    F,0x10             
                                        (0306)    PWMB_Stop_M                                   ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
08E6: 5D 41    MOV   A,REG[0x41]        (0308)    mov   A, reg[PWMB_INPUT_REG]                  ; save the clock input setting
08E8: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
08E9: 62 41 00 MOV   REG[0x41],0x0      (0311)    mov   reg[PWMB_INPUT_REG], INPUT_REG_NULL
08EC: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
08EE: 5D 40    MOV   A,REG[0x40]        (0314)    mov   A, reg[PWMB_COUNTER_REG]                ; DR2 <- DR0
08F0: 5D 42    MOV   A,REG[0x42]        (0315)    mov   A, reg[PWMB_COMPARE_REG]                ; Stash the Count on the stack
08F2: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
08F3: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
08F5: 60 42    MOV   REG[0x42],A        (0318)    mov   reg[PWMB_COMPARE_REG], A
08F7: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
08F9: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
08FB: 60 41    MOV   REG[0x41],A        (0321)    mov   reg[PWMB_INPUT_REG], A                  ;
08FD: 70 EF    AND   F,0xEF             
08FF: 43 43 01 OR    REG[0x43],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWMB_Start_M                                  ;   then re-enable the PWM.
0902: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
0903: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
0905: 70 3F    AND   F,0x3F             
0907: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
0909: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWMB.asm
FILE: lib\pwmaint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWMAINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:26:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWMA.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWMA_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWMA_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWMA_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
090A: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWMAINT.asm
FILE: lib\pwma.asm                      (0001) ;;*****************************************************************************
090B: 43 E1 08 OR    REG[0xE1],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWMA.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:26:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWMA.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWMA_EnableInt
                                        (0030) export _PWMA_EnableInt
                                        (0031) export  PWMA_DisableInt
                                        (0032) export _PWMA_DisableInt
                                        (0033) export  PWMA_Start
                                        (0034) export _PWMA_Start
                                        (0035) export  PWMA_Stop
                                        (0036) export _PWMA_Stop
                                        (0037) export  PWMA_WritePeriod
                                        (0038) export _PWMA_WritePeriod
                                        (0039) export  PWMA_WritePulseWidth
                                        (0040) export _PWMA_WritePulseWidth
                                        (0041) export  PWMA_bReadPulseWidth
                                        (0042) export _PWMA_bReadPulseWidth
                                        (0043) export  PWMA_bReadCounter
                                        (0044) export _PWMA_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWMA_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWMA_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWMA_ReadCounter       ; deprecated
                                        (0051) export _bPWMA_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA kipr_2_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWMA_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWMA_EnableInt:
                                        (0091) _PWMA_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWMA_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
090E: 7F       RET                      (0095)    ret
090F: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWMA_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWMA_DisableInt:
                                        (0119) _PWMA_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWMA_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0912: 7F       RET                      (0123)    ret
0913: 43 2F 01 OR    REG[0x2F],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWMA_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWMA_Start:
                                        (0148) _PWMA_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWMA_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0916: 7F       RET                      (0152)    ret
0917: 41 2F FE AND   REG[0x2F],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWMA_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWMA_Stop:
                                        (0176) _PWMA_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWMA_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
091A: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWMA_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWMA_WritePeriod:
                                        (0206) _PWMA_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
091B: 60 2D    MOV   REG[0x2D],A        (0208)    mov   reg[PWMA_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
091D: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWMA_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWMA_WritePulseWidth:
                                        (0233) _PWMA_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
091E: 60 2E    MOV   REG[0x2E],A        (0235)    mov   reg[PWMA_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0920: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWMA_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWMA_bReadPulseWidth:
                                        (0260) _PWMA_bReadPulseWidth:
                                        (0261)  bPWMA_ReadPulseWidth:                           ; this name deprecated
                                        (0262) _bPWMA_ReadPulseWidth:                           ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0921: 5D 2E    MOV   A,REG[0x2E]        (0264)    mov   A, reg[PWMA_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
0923: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWMA_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWMA_bReadCounter:
                                        (0293) _PWMA_bReadCounter:
                                        (0294)  bPWMA_ReadCounter:                              ; this name deprecated
                                        (0295) _bPWMA_ReadCounter:                              ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
0924: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
0925: 5D 2E    MOV   A,REG[0x2E]        (0304)    mov   A, reg[PWMA_COMPARE_REG]                ; Save the Compare register on the stack
0927: 08       PUSH  A                  (0305)    push  A                                       ;
0928: 41 2F FE AND   REG[0x2F],0xFE     
092B: 71 10    OR    F,0x10             
                                        (0306)    PWMA_Stop_M                                   ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
092D: 5D 2D    MOV   A,REG[0x2D]        (0308)    mov   A, reg[PWMA_INPUT_REG]                  ; save the clock input setting
092F: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
0930: 62 2D 00 MOV   REG[0x2D],0x0      (0311)    mov   reg[PWMA_INPUT_REG], INPUT_REG_NULL
0933: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
0935: 5D 2C    MOV   A,REG[0x2C]        (0314)    mov   A, reg[PWMA_COUNTER_REG]                ; DR2 <- DR0
0937: 5D 2E    MOV   A,REG[0x2E]        (0315)    mov   A, reg[PWMA_COMPARE_REG]                ; Stash the Count on the stack
0939: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
093A: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
093C: 60 2E    MOV   REG[0x2E],A        (0318)    mov   reg[PWMA_COMPARE_REG], A
093E: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
0940: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0942: 60 2D    MOV   REG[0x2D],A        (0321)    mov   reg[PWMA_INPUT_REG], A                  ;
0944: 70 EF    AND   F,0xEF             
0946: 43 2F 01 OR    REG[0x2F],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWMA_Start_M                                  ;   then re-enable the PWM.
0949: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
094A: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
094C: 70 3F    AND   F,0x3F             
094E: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
0950: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWMA.asm
FILE: lib\enc1b_pedge.asm               (0001) ;;*****************************************************************************
0951: 43 E1 20 OR    REG[0xE1],0x20     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ENC1B_PEDGE.asm
                                        (0004) ;;  Version: 1.3, Updated on 2015/3/4 at 22:26:4
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DigitalBuffers User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "ENC1B_PEDGE.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  ENC1B_PEDGE_EnableInt
                                        (0030) export _ENC1B_PEDGE_EnableInt
                                        (0031) export  ENC1B_PEDGE_DisableInt
                                        (0032) export _ENC1B_PEDGE_DisableInt
                                        (0033) export  ENC1B_PEDGE_Start
                                        (0034) export _ENC1B_PEDGE_Start
                                        (0035) export  ENC1B_PEDGE_Stop
                                        (0036) export _ENC1B_PEDGE_Stop
                                        (0037) 
                                        (0038) AREA bss (RAM,REL)
                                        (0039) 
                                        (0040) ;-----------------------------------------------
                                        (0041) ;  Constant Definitions
                                        (0042) ;-----------------------------------------------
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------
                                        (0046) ; Variable Allocation
                                        (0047) ;-----------------------------------------------
                                        (0048) 
                                        (0049) 
                                        (0050) AREA UserModules (ROM, REL)
                                        (0051) 
                                        (0052) .SECTION
                                        (0053) ;-----------------------------------------------------------------------------
                                        (0054) ;  FUNCTION NAME: ENC1B_PEDGE_EnableInt
                                        (0055) ;
                                        (0056) ;  DESCRIPTION:
                                        (0057) ;     Enables the DigBuf's interrupt by setting the interrupt enable mask bit
                                        (0058) ;     associated with this User Module. This function has no effect until and
                                        (0059) ;     unless the global interrupts are enabled (for example by using the
                                        (0060) ;     macro M8C_EnableGInt).
                                        (0061) ;-----------------------------------------------------------------------------
                                        (0062) ;
                                        (0063) ;  ARGUMENTS:    None.
                                        (0064) ;  RETURNS:      Nothing.
                                        (0065) ;  SIDE EFFECTS:
                                        (0066) ;    The A and X registers may be modified by this or future implementations
                                        (0067) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0068) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0069) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0070) ;    functions.
                                        (0071) ;
                                        (0072)  ENC1B_PEDGE_EnableInt:
                                        (0073) _ENC1B_PEDGE_EnableInt:
                                        (0074)    RAM_PROLOGUE RAM_USE_CLASS_1   
                                        (0075)    ENC1B_PEDGE_EnableInt_M
                                        (0076)    RAM_EPILOGUE RAM_USE_CLASS_1
0954: 7F       RET                      (0077)    ret
0955: 41 E1 DF AND   REG[0xE1],0xDF     
                                        (0078) 
                                        (0079) .ENDSECTION
                                        (0080) 
                                        (0081) .SECTION
                                        (0082) ;-----------------------------------------------------------------------------
                                        (0083) ;  FUNCTION NAME: ENC1B_PEDGE_DisableInt
                                        (0084) ;
                                        (0085) ;  DESCRIPTION:
                                        (0086) ;     Disables the DigBuf's interrupt by clearing the interrupt enable mask bit
                                        (0087) ;     associated with this User Module. 
                                        (0088) ;-----------------------------------------------------------------------------
                                        (0089) ;
                                        (0090) ;  ARGUMENTS:    None.
                                        (0091) ;  RETURNS:      Nothing.
                                        (0092) ;  SIDE EFFECTS:
                                        (0093) ;    The A and X registers may be modified by this or future implementations
                                        (0094) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0095) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0096) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0097) ;    functions.
                                        (0098) ;
                                        (0099)  ENC1B_PEDGE_DisableInt:
                                        (0100) _ENC1B_PEDGE_DisableInt:
                                        (0101)    RAM_PROLOGUE RAM_USE_CLASS_1   
                                        (0102)    ENC1B_PEDGE_DisableInt_M
                                        (0103)    RAM_EPILOGUE RAM_USE_CLASS_1
0958: 7F       RET                      (0104)    ret
0959: 43 37 01 OR    REG[0x37],0x1      
                                        (0105) 
                                        (0106) .ENDSECTION
                                        (0107) 
                                        (0108) .SECTION
                                        (0109) ;-----------------------------------------------------------------------------
                                        (0110) ;  FUNCTION NAME: ENC1B_PEDGE_Start
                                        (0111) ;
                                        (0112) ;  DESCRIPTION:
                                        (0113) ;     Starts the Digital Buffers within the block.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS:
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  ENC1B_PEDGE_Start:
                                        (0126) _ENC1B_PEDGE_Start:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    ENC1B_PEDGE_Start_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
095C: 7F       RET                      (0130)    ret
095D: 41 37 FE AND   REG[0x37],0xFE     
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) .SECTION
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;  FUNCTION NAME: ENC1B_PEDGE_Stop
                                        (0137) ;
                                        (0138) ;  DESCRIPTION:
                                        (0139) ;     Stops the Digital Buffers within the block. The outputs are driven low.
                                        (0140) ;-----------------------------------------------------------------------------
                                        (0141) ;
                                        (0142) ;  ARGUMENTS:    None
                                        (0143) ;  RETURNS:      Nothing
                                        (0144) ;  SIDE EFFECTS:
                                        (0145) ;    The A and X registers may be modified by this or future implementations
                                        (0146) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0147) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0148) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0149) ;    functions.
                                        (0150) ;
                                        (0151)  ENC1B_PEDGE_Stop:
                                        (0152) _ENC1B_PEDGE_Stop:
                                        (0153)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0154)    ENC1B_PEDGE_Stop_M
                                        (0155)    RAM_EPILOGUE RAM_USE_CLASS_1
0960: 7F       RET                      (0156)    ret
                                        (0157) 
                                        (0158) .ENDSECTION
                                        (0159) 
                                        (0160) 
                                        (0161) ; End of File ENC1B_PEDGE.asm
                                        (0162) 
                                        (0163) 
FILE: lib\enc1b_fedgeint.asm            (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ENC1B_FEDGEINT.asm
                                        (0004) ;;   Version: Version: 1.60, Updated on 2015/3/4 at 22:26:5
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "ENC1B_FEDGE.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _ENC1B_FEDGE_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _ENC1B_FEDGE_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _ENC1B_FEDGE_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0961: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file ENC1B_FEDGEINT.asm
FILE: lib\enc1b_fedge.asm               (0001) ;;*****************************************************************************
0962: 43 DF 02 OR    REG[0xDF],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ENC1B_FEDGE.asm
                                        (0004) ;;   Version: 1.60, Updated on 2015/3/4 at 22:26:5
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DigInv User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "ENC1B_FEDGE.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export   ENC1B_FEDGE_EnableInt
                                        (0031) export  _ENC1B_FEDGE_EnableInt
                                        (0032) export   ENC1B_FEDGE_DisableInt
                                        (0033) export  _ENC1B_FEDGE_DisableInt
                                        (0034) export   ENC1B_FEDGE_Start
                                        (0035) export  _ENC1B_FEDGE_Start
                                        (0036) export   ENC1B_FEDGE_Stop
                                        (0037) export  _ENC1B_FEDGE_Stop
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  EQUATES
                                        (0041) ;-----------------------------------------------
                                        (0042) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                        (0043) 
                                        (0044) area UserModules (ROM, REL)
                                        (0045) 
                                        (0046) .SECTION
                                        (0047) ;-----------------------------------------------------------------------------
                                        (0048) ;  FUNCTION NAME: ENC1B_FEDGE_EnableInt
                                        (0049) ;
                                        (0050) ;  DESCRIPTION:
                                        (0051) ;     Enables this receiver's interrupt by setting the interrupt enable mask
                                        (0052) ;     bit associated with this User Module. Remember to call the global interrupt
                                        (0053) ;     enable function by using the macro: M8C_EnableGInt.
                                        (0054) ;
                                        (0055) ;-----------------------------------------------------------------------------
                                        (0056) ;
                                        (0057) ;  ARGUMENTS: none
                                        (0058) ;
                                        (0059) ;  RETURNS: none
                                        (0060) ;
                                        (0061) ;  SIDE EFFECTS:
                                        (0062) ;    The A and X registers may be modified by this or future implementations
                                        (0063) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0064) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0065) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0066) ;    functions.
                                        (0067) ;
                                        (0068)  ENC1B_FEDGE_EnableInt:
                                        (0069) _ENC1B_FEDGE_EnableInt:
                                        (0070)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0071)    M8C_EnableIntMask ENC1B_FEDGE_INT_REG, ENC1B_FEDGE_bINT_MASK
                                        (0072)    RAM_EPILOGUE RAM_USE_CLASS_1
0965: 7F       RET                      (0073)    ret
0966: 41 DF FD AND   REG[0xDF],0xFD     
                                        (0074) .ENDSECTION
                                        (0075) 
                                        (0076) .SECTION
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  FUNCTION NAME: ENC1B_FEDGE_DisableInt
                                        (0079) ;
                                        (0080) ;  DESCRIPTION:
                                        (0081) ;     Disables this RX8's interrupt by clearing the interrupt enable mask bit
                                        (0082) ;     associated with this User Module.
                                        (0083) ;
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;
                                        (0086) ;  ARGUMENTS:  none
                                        (0087) ;
                                        (0088) ;  RETURNS:  none
                                        (0089) ;
                                        (0090) ;  SIDE EFFECTS:
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  ENC1B_FEDGE_DisableInt:
                                        (0098) _ENC1B_FEDGE_DisableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    M8C_DisableIntMask ENC1B_FEDGE_INT_REG, ENC1B_FEDGE_bINT_MASK
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0969: 7F       RET                      (0102)    ret
                                        (0103) .ENDSECTION
                                        (0104) 
                                        (0105) .SECTION
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) ;  FUNCTION NAME: ENC1B_FEDGE_Start
                                        (0108) ;
                                        (0109) ;  DESCRIPTION:
                                        (0110) ;     Sets the start bit in the Control register of this user module.
                                        (0111) ;
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;
                                        (0114) ;  ARGUMENTS: none
                                        (0115) ;
                                        (0116) ;  RETURNS: none
                                        (0117) ;
                                        (0118) ;  SIDE EFFECTS:
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125) ;  THEORY of OPERATION or PROCEDURE:
                                        (0126) ;
                                        (0127) ;     1) Save the Interrupt register
                                        (0128) ;     2) Save the Output register
                                        (0129) ;     3) Save the input register
                                        (0130) ;     4) Switch the output to Disabled - LOW
                                        (0131) ;     5) Disable Interrupt
                                        (0132) ;     6) Start the DigInv
                                        (0133) ;     7) Re-instate the input source
                                        (0134) ;     8) Re-instate the output
                                        (0135) ;     9) Re-instate the Interrupt register
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137)  ENC1B_FEDGE_Start:
                                        (0138) _ENC1B_FEDGE_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
096A: 08       PUSH  A                  (0140)    push  A
                                        (0141) 
                                        (0142)    ; The DigInv must see a positive clock edge in order to "start" itself
                                        (0143)    ; in the correct state.  Once it sees a clock edge, it will follow its
                                        (0144)    ; input source.  To do this, we disable outputs, switch the input source
                                        (0145)    ; to the 48MHz clock, start the DigInv, re-instate the user's input source
                                        (0146)    ; and then re-instate the output.
                                        (0147) 
                                        (0148)    ; disable the interrupt
096B: 5D DF    MOV   A,REG[0xDF]        (0149)    mov   A, REG[ENC1B_FEDGE_INT_REG]
096D: 08       PUSH  A                  (0150)    push  A
096E: 41 DF FD AND   REG[0xDF],0xFD     
0971: 71 10    OR    F,0x10             
                                        (0151) 
                                        (0152)    M8C_DisableIntMask ENC1B_FEDGE_INT_REG, ENC1B_FEDGE_bINT_MASK
                                        (0153) 
                                        (0154)    M8C_SetBank1
                                        (0155)    ; set the output to disable - will remain low!
0973: 5D 46    MOV   A,REG[0x46]        (0156)    mov   A, REG[ENC1B_FEDGE_OUTPUT_REG]
0975: 08       PUSH  A                  (0157)    push  A
                                        (0158) 
0976: 62 46 00 MOV   REG[0x46],0x0      (0159)    mov   REG[ENC1B_FEDGE_OUTPUT_REG], 0
                                        (0160) 
                                        (0161)    ; set the input to the 48MHz clock
0979: 5D 45    MOV   A,REG[0x45]        (0162)    mov   A, REG[ENC1B_FEDGE_INPUT_REG]
097B: 08       PUSH  A                  (0163)    push  A
                                        (0164) 
097C: 62 45 04 MOV   REG[0x45],0x4      (0165)    mov   REG[ENC1B_FEDGE_INPUT_REG], 04
097F: 70 EF    AND   F,0xEF             
                                        (0166) 
                                        (0167)    M8C_SetBank0
                                        (0168)    ; start the inverter
0981: 43 47 01 OR    REG[0x47],0x1      (0169)    or    REG[ENC1B_FEDGE_CONTROL_REG], bfCONTROL_REG_START_BIT
0984: 71 10    OR    F,0x10             
                                        (0170) 
                                        (0171)    ; Re-instate the input
                                        (0172)    M8C_SetBank1
0986: 18       POP   A                  (0173)    pop   A
0987: 60 45    MOV   REG[0x45],A        (0174)    mov   REG[ENC1B_FEDGE_INPUT_REG], A
                                        (0175) 
                                        (0176)    ; Re-instate the output
0989: 18       POP   A                  (0177)    pop   A
098A: 60 46    MOV   REG[0x46],A        (0178)    mov   REG[ENC1B_FEDGE_OUTPUT_REG], A
098C: 70 EF    AND   F,0xEF             
098E: 62 DB FD MOV   REG[0xDB],0xFD     
                                        (0179)    M8C_SetBank0
                                        (0180) 
                                        (0181)    ;clear interrupt
                                        (0182)    M8C_ClearIntFlag INT_CLR1, ENC1B_FEDGE_bINT_MASK
                                        (0183) 
                                        (0184)    ; Re-instate the interrupt state
0991: 18       POP   A                  (0185)    pop   A
0992: 60 DF    MOV   REG[0xDF],A        (0186)    mov   REG[ENC1B_FEDGE_INT_REG], A
                                        (0187) 
                                        (0188)    ;Done!
0994: 18       POP   A                  (0189)    pop   A
                                        (0190)    RAM_EPILOGUE RAM_USE_CLASS_1
0995: 7F       RET                      (0191)    ret
                                        (0192) 
                                        (0193) .ENDSECTION
                                        (0194) 
                                        (0195) .SECTION
                                        (0196) ;-----------------------------------------------------------------------------
                                        (0197) ;  FUNCTION NAME: ENC1B_FEDGE_Stop
                                        (0198) ;
                                        (0199) ;  DESCRIPTION:
                                        (0200) ;     Halts operation of the Digital Inverter.  Output is set LOW.
                                        (0201) ;
                                        (0202) ;-----------------------------------------------------------------------------
                                        (0203) ;
                                        (0204) ;  ARGUMENTS: none
                                        (0205) ;
                                        (0206) ;  RETURNS: none
                                        (0207) ;
                                        (0208) ;  SIDE EFFECTS:
                                        (0209) ;    The A and X registers may be modified by this or future implementations
                                        (0210) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0211) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0212) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0213) ;    functions.
                                        (0214) ;
                                        (0215)  ENC1B_FEDGE_Stop:
                                        (0216) _ENC1B_FEDGE_Stop:
                                        (0217) 
                                        (0218)    RAM_PROLOGUE RAM_USE_CLASS_1
0996: 41 47 FE AND   REG[0x47],0xFE     (0219)    and   REG[ENC1B_FEDGE_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0220)    RAM_EPILOGUE RAM_USE_CLASS_1
0999: 7F       RET                      (0221)    ret
                                        (0222) 
                                        (0223) .ENDSECTION
                                        (0224) 
                                        (0225) ; End of File ENC1B_FEDGE.asm
                                        (0226) 
                                        (0227) 
                                        (0228) 
FILE: lib\enc1a_pedge.asm               (0001) ;;*****************************************************************************
099A: 43 E1 01 OR    REG[0xE1],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ENC1A_PEDGE.asm
                                        (0004) ;;  Version: 1.3, Updated on 2015/3/4 at 22:26:4
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DigitalBuffers User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "ENC1A_PEDGE.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  ENC1A_PEDGE_EnableInt
                                        (0030) export _ENC1A_PEDGE_EnableInt
                                        (0031) export  ENC1A_PEDGE_DisableInt
                                        (0032) export _ENC1A_PEDGE_DisableInt
                                        (0033) export  ENC1A_PEDGE_Start
                                        (0034) export _ENC1A_PEDGE_Start
                                        (0035) export  ENC1A_PEDGE_Stop
                                        (0036) export _ENC1A_PEDGE_Stop
                                        (0037) 
                                        (0038) AREA bss (RAM,REL)
                                        (0039) 
                                        (0040) ;-----------------------------------------------
                                        (0041) ;  Constant Definitions
                                        (0042) ;-----------------------------------------------
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------
                                        (0046) ; Variable Allocation
                                        (0047) ;-----------------------------------------------
                                        (0048) 
                                        (0049) 
                                        (0050) AREA UserModules (ROM, REL)
                                        (0051) 
                                        (0052) .SECTION
                                        (0053) ;-----------------------------------------------------------------------------
                                        (0054) ;  FUNCTION NAME: ENC1A_PEDGE_EnableInt
                                        (0055) ;
                                        (0056) ;  DESCRIPTION:
                                        (0057) ;     Enables the DigBuf's interrupt by setting the interrupt enable mask bit
                                        (0058) ;     associated with this User Module. This function has no effect until and
                                        (0059) ;     unless the global interrupts are enabled (for example by using the
                                        (0060) ;     macro M8C_EnableGInt).
                                        (0061) ;-----------------------------------------------------------------------------
                                        (0062) ;
                                        (0063) ;  ARGUMENTS:    None.
                                        (0064) ;  RETURNS:      Nothing.
                                        (0065) ;  SIDE EFFECTS:
                                        (0066) ;    The A and X registers may be modified by this or future implementations
                                        (0067) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0068) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0069) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0070) ;    functions.
                                        (0071) ;
                                        (0072)  ENC1A_PEDGE_EnableInt:
                                        (0073) _ENC1A_PEDGE_EnableInt:
                                        (0074)    RAM_PROLOGUE RAM_USE_CLASS_1   
                                        (0075)    ENC1A_PEDGE_EnableInt_M
                                        (0076)    RAM_EPILOGUE RAM_USE_CLASS_1
099D: 7F       RET                      (0077)    ret
099E: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0078) 
                                        (0079) .ENDSECTION
                                        (0080) 
                                        (0081) .SECTION
                                        (0082) ;-----------------------------------------------------------------------------
                                        (0083) ;  FUNCTION NAME: ENC1A_PEDGE_DisableInt
                                        (0084) ;
                                        (0085) ;  DESCRIPTION:
                                        (0086) ;     Disables the DigBuf's interrupt by clearing the interrupt enable mask bit
                                        (0087) ;     associated with this User Module. 
                                        (0088) ;-----------------------------------------------------------------------------
                                        (0089) ;
                                        (0090) ;  ARGUMENTS:    None.
                                        (0091) ;  RETURNS:      Nothing.
                                        (0092) ;  SIDE EFFECTS:
                                        (0093) ;    The A and X registers may be modified by this or future implementations
                                        (0094) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0095) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0096) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0097) ;    functions.
                                        (0098) ;
                                        (0099)  ENC1A_PEDGE_DisableInt:
                                        (0100) _ENC1A_PEDGE_DisableInt:
                                        (0101)    RAM_PROLOGUE RAM_USE_CLASS_1   
                                        (0102)    ENC1A_PEDGE_DisableInt_M
                                        (0103)    RAM_EPILOGUE RAM_USE_CLASS_1
09A1: 7F       RET                      (0104)    ret
09A2: 43 23 01 OR    REG[0x23],0x1      
                                        (0105) 
                                        (0106) .ENDSECTION
                                        (0107) 
                                        (0108) .SECTION
                                        (0109) ;-----------------------------------------------------------------------------
                                        (0110) ;  FUNCTION NAME: ENC1A_PEDGE_Start
                                        (0111) ;
                                        (0112) ;  DESCRIPTION:
                                        (0113) ;     Starts the Digital Buffers within the block.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS:
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  ENC1A_PEDGE_Start:
                                        (0126) _ENC1A_PEDGE_Start:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    ENC1A_PEDGE_Start_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
09A5: 7F       RET                      (0130)    ret
09A6: 41 23 FE AND   REG[0x23],0xFE     
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) .SECTION
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;  FUNCTION NAME: ENC1A_PEDGE_Stop
                                        (0137) ;
                                        (0138) ;  DESCRIPTION:
                                        (0139) ;     Stops the Digital Buffers within the block. The outputs are driven low.
                                        (0140) ;-----------------------------------------------------------------------------
                                        (0141) ;
                                        (0142) ;  ARGUMENTS:    None
                                        (0143) ;  RETURNS:      Nothing
                                        (0144) ;  SIDE EFFECTS:
                                        (0145) ;    The A and X registers may be modified by this or future implementations
                                        (0146) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0147) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0148) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0149) ;    functions.
                                        (0150) ;
                                        (0151)  ENC1A_PEDGE_Stop:
                                        (0152) _ENC1A_PEDGE_Stop:
                                        (0153)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0154)    ENC1A_PEDGE_Stop_M
                                        (0155)    RAM_EPILOGUE RAM_USE_CLASS_1
09A9: 7F       RET                      (0156)    ret
                                        (0157) 
                                        (0158) .ENDSECTION
                                        (0159) 
                                        (0160) 
                                        (0161) ; End of File ENC1A_PEDGE.asm
                                        (0162) 
                                        (0163) 
FILE: lib\enc1a_fedge.asm               (0001) ;;*****************************************************************************
09AA: 43 E1 10 OR    REG[0xE1],0x10     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ENC1A_FEDGE.asm
                                        (0004) ;;   Version: 1.60, Updated on 2015/3/4 at 22:26:5
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DigInv User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "ENC1A_FEDGE.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export   ENC1A_FEDGE_EnableInt
                                        (0031) export  _ENC1A_FEDGE_EnableInt
                                        (0032) export   ENC1A_FEDGE_DisableInt
                                        (0033) export  _ENC1A_FEDGE_DisableInt
                                        (0034) export   ENC1A_FEDGE_Start
                                        (0035) export  _ENC1A_FEDGE_Start
                                        (0036) export   ENC1A_FEDGE_Stop
                                        (0037) export  _ENC1A_FEDGE_Stop
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  EQUATES
                                        (0041) ;-----------------------------------------------
                                        (0042) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                        (0043) 
                                        (0044) area UserModules (ROM, REL)
                                        (0045) 
                                        (0046) .SECTION
                                        (0047) ;-----------------------------------------------------------------------------
                                        (0048) ;  FUNCTION NAME: ENC1A_FEDGE_EnableInt
                                        (0049) ;
                                        (0050) ;  DESCRIPTION:
                                        (0051) ;     Enables this receiver's interrupt by setting the interrupt enable mask
                                        (0052) ;     bit associated with this User Module. Remember to call the global interrupt
                                        (0053) ;     enable function by using the macro: M8C_EnableGInt.
                                        (0054) ;
                                        (0055) ;-----------------------------------------------------------------------------
                                        (0056) ;
                                        (0057) ;  ARGUMENTS: none
                                        (0058) ;
                                        (0059) ;  RETURNS: none
                                        (0060) ;
                                        (0061) ;  SIDE EFFECTS:
                                        (0062) ;    The A and X registers may be modified by this or future implementations
                                        (0063) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0064) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0065) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0066) ;    functions.
                                        (0067) ;
                                        (0068)  ENC1A_FEDGE_EnableInt:
                                        (0069) _ENC1A_FEDGE_EnableInt:
                                        (0070)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0071)    M8C_EnableIntMask ENC1A_FEDGE_INT_REG, ENC1A_FEDGE_bINT_MASK
                                        (0072)    RAM_EPILOGUE RAM_USE_CLASS_1
09AD: 7F       RET                      (0073)    ret
09AE: 41 E1 EF AND   REG[0xE1],0xEF     
                                        (0074) .ENDSECTION
                                        (0075) 
                                        (0076) .SECTION
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  FUNCTION NAME: ENC1A_FEDGE_DisableInt
                                        (0079) ;
                                        (0080) ;  DESCRIPTION:
                                        (0081) ;     Disables this RX8's interrupt by clearing the interrupt enable mask bit
                                        (0082) ;     associated with this User Module.
                                        (0083) ;
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;
                                        (0086) ;  ARGUMENTS:  none
                                        (0087) ;
                                        (0088) ;  RETURNS:  none
                                        (0089) ;
                                        (0090) ;  SIDE EFFECTS:
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  ENC1A_FEDGE_DisableInt:
                                        (0098) _ENC1A_FEDGE_DisableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    M8C_DisableIntMask ENC1A_FEDGE_INT_REG, ENC1A_FEDGE_bINT_MASK
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
09B1: 7F       RET                      (0102)    ret
                                        (0103) .ENDSECTION
                                        (0104) 
                                        (0105) .SECTION
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) ;  FUNCTION NAME: ENC1A_FEDGE_Start
                                        (0108) ;
                                        (0109) ;  DESCRIPTION:
                                        (0110) ;     Sets the start bit in the Control register of this user module.
                                        (0111) ;
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;
                                        (0114) ;  ARGUMENTS: none
                                        (0115) ;
                                        (0116) ;  RETURNS: none
                                        (0117) ;
                                        (0118) ;  SIDE EFFECTS:
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125) ;  THEORY of OPERATION or PROCEDURE:
                                        (0126) ;
                                        (0127) ;     1) Save the Interrupt register
                                        (0128) ;     2) Save the Output register
                                        (0129) ;     3) Save the input register
                                        (0130) ;     4) Switch the output to Disabled - LOW
                                        (0131) ;     5) Disable Interrupt
                                        (0132) ;     6) Start the DigInv
                                        (0133) ;     7) Re-instate the input source
                                        (0134) ;     8) Re-instate the output
                                        (0135) ;     9) Re-instate the Interrupt register
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137)  ENC1A_FEDGE_Start:
                                        (0138) _ENC1A_FEDGE_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
09B2: 08       PUSH  A                  (0140)    push  A
                                        (0141) 
                                        (0142)    ; The DigInv must see a positive clock edge in order to "start" itself
                                        (0143)    ; in the correct state.  Once it sees a clock edge, it will follow its
                                        (0144)    ; input source.  To do this, we disable outputs, switch the input source
                                        (0145)    ; to the 48MHz clock, start the DigInv, re-instate the user's input source
                                        (0146)    ; and then re-instate the output.
                                        (0147) 
                                        (0148)    ; disable the interrupt
09B3: 5D E1    MOV   A,REG[0xE1]        (0149)    mov   A, REG[ENC1A_FEDGE_INT_REG]
09B5: 08       PUSH  A                  (0150)    push  A
09B6: 41 E1 EF AND   REG[0xE1],0xEF     
09B9: 71 10    OR    F,0x10             
                                        (0151) 
                                        (0152)    M8C_DisableIntMask ENC1A_FEDGE_INT_REG, ENC1A_FEDGE_bINT_MASK
                                        (0153) 
                                        (0154)    M8C_SetBank1
                                        (0155)    ; set the output to disable - will remain low!
09BB: 5D 32    MOV   A,REG[0x32]        (0156)    mov   A, REG[ENC1A_FEDGE_OUTPUT_REG]
09BD: 08       PUSH  A                  (0157)    push  A
                                        (0158) 
09BE: 62 32 00 MOV   REG[0x32],0x0      (0159)    mov   REG[ENC1A_FEDGE_OUTPUT_REG], 0
                                        (0160) 
                                        (0161)    ; set the input to the 48MHz clock
09C1: 5D 31    MOV   A,REG[0x31]        (0162)    mov   A, REG[ENC1A_FEDGE_INPUT_REG]
09C3: 08       PUSH  A                  (0163)    push  A
                                        (0164) 
09C4: 62 31 04 MOV   REG[0x31],0x4      (0165)    mov   REG[ENC1A_FEDGE_INPUT_REG], 04
09C7: 70 EF    AND   F,0xEF             
                                        (0166) 
                                        (0167)    M8C_SetBank0
                                        (0168)    ; start the inverter
09C9: 43 33 01 OR    REG[0x33],0x1      (0169)    or    REG[ENC1A_FEDGE_CONTROL_REG], bfCONTROL_REG_START_BIT
09CC: 71 10    OR    F,0x10             
                                        (0170) 
                                        (0171)    ; Re-instate the input
                                        (0172)    M8C_SetBank1
09CE: 18       POP   A                  (0173)    pop   A
09CF: 60 31    MOV   REG[0x31],A        (0174)    mov   REG[ENC1A_FEDGE_INPUT_REG], A
                                        (0175) 
                                        (0176)    ; Re-instate the output
09D1: 18       POP   A                  (0177)    pop   A
09D2: 60 32    MOV   REG[0x32],A        (0178)    mov   REG[ENC1A_FEDGE_OUTPUT_REG], A
09D4: 70 EF    AND   F,0xEF             
09D6: 62 DB EF MOV   REG[0xDB],0xEF     
                                        (0179)    M8C_SetBank0
                                        (0180) 
                                        (0181)    ;clear interrupt
                                        (0182)    M8C_ClearIntFlag INT_CLR1, ENC1A_FEDGE_bINT_MASK
                                        (0183) 
                                        (0184)    ; Re-instate the interrupt state
09D9: 18       POP   A                  (0185)    pop   A
09DA: 60 E1    MOV   REG[0xE1],A        (0186)    mov   REG[ENC1A_FEDGE_INT_REG], A
                                        (0187) 
                                        (0188)    ;Done!
09DC: 18       POP   A                  (0189)    pop   A
                                        (0190)    RAM_EPILOGUE RAM_USE_CLASS_1
09DD: 7F       RET                      (0191)    ret
                                        (0192) 
                                        (0193) .ENDSECTION
                                        (0194) 
                                        (0195) .SECTION
                                        (0196) ;-----------------------------------------------------------------------------
                                        (0197) ;  FUNCTION NAME: ENC1A_FEDGE_Stop
                                        (0198) ;
                                        (0199) ;  DESCRIPTION:
                                        (0200) ;     Halts operation of the Digital Inverter.  Output is set LOW.
                                        (0201) ;
                                        (0202) ;-----------------------------------------------------------------------------
                                        (0203) ;
                                        (0204) ;  ARGUMENTS: none
                                        (0205) ;
                                        (0206) ;  RETURNS: none
                                        (0207) ;
                                        (0208) ;  SIDE EFFECTS:
                                        (0209) ;    The A and X registers may be modified by this or future implementations
                                        (0210) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0211) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0212) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0213) ;    functions.
                                        (0214) ;
                                        (0215)  ENC1A_FEDGE_Stop:
                                        (0216) _ENC1A_FEDGE_Stop:
                                        (0217) 
                                        (0218)    RAM_PROLOGUE RAM_USE_CLASS_1
09DE: 41 33 FE AND   REG[0x33],0xFE     (0219)    and   REG[ENC1A_FEDGE_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0220)    RAM_EPILOGUE RAM_USE_CLASS_1
09E1: 7F       RET                      (0221)    ret
                                        (0222) 
                                        (0223) .ENDSECTION
                                        (0224) 
                                        (0225) ; End of File ENC1A_FEDGE.asm
                                        (0226) 
                                        (0227) 
                                        (0228) 
FILE: C:\Users\ryowens\Desktop\KIPR-O~1\PSOCCO~1\KIPR_2\KIPR_2\KIPR_2\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include <stdlib.h>
(0008) 
(0009) #pragma interrupt_handler encoder1_ISR
(0010) #pragma interrupt_handler encoder2_ISR
(0011) 
(0012) #define 	stateA1 		0x20
(0013) #define 	stateB1 		0x08
(0014) #define 	stateA2 		0x10
(0015) #define 	stateB2 		0x04
(0016) 
(0017) const char 	MAV 	 	=	'a'; //Move at velocity
(0018) const char 	MOV 	 	=	'b'; //move at duty cycle
(0019) const char 	GETV 	 	=	'c'; //get velocity
(0020) const char  SRV0_POS 	= 	'd'; //set servo positions for servo 0
(0021) const char 	SRV1_POS 	= 	'e'; // ' ' ' ' ' ' ' ' ' ' ' ' ' '  1
(0022) const char  SRV2_POS 	=	'f'; // ' ' ' ' ' ' ' ' ' ' ' ' ' '  2
(0023) const char	SRV3_POS 	=	'g'; // ' ' ' ' ' ' ' ' ' ' ' ' ' '  3
(0024) const char 	GETC1	 	=	'h'; //get encoder1 count
(0025) const char  GETC2	 	=	'i'; //get encoder2 count
(0026) const char 	RSTC1	 	=	'j'; //reset encoder1 count
(0027) const char	RSTC2	 	=	'k'; //reset encoder2 count
(0028) const char  STOP		=	'l'; //stop motors
(0029) 
(0030) 
(0031) int i = 0; //loop var
(0032) 
(0033) BYTE curPrt1;
(0034) BYTE prevPrt1;
(0035) BYTE curPrt2;
(0036) BYTE prevPrt2;
(0037) 
(0038) signed long int count1 = 0;
(0039) signed long int count2 = 0;
(0040) 
(0041) void action(char command, char* param, BOOL debug);
(0042) int getVelocity(void);
(0043) 
(0044) void main(void)
(0045) {
__UserModules_end|_main|__text_start|_main:
  command              --> X+4
  param                --> X+2
  data                 --> X+0
    09E2: 10       PUSH  X
    09E3: 4F       MOV   X,SP
    09E4: 38 05    ADD   SP,0x5
(0046) 	char command;
(0047) 	char* param;
(0048) 	char* data;
(0049) 	
(0050) 	M8C_EnableGInt ;
    09E6: 71 01    OR    F,0x1
(0051) 	M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);
    09E8: 43 E0 20 OR    REG[0xE0],0x20
(0052) 	M8C_EnableIntMask(INT_MSK1, INT_MSK1_DBB00);
    09EB: 43 E1 01 OR    REG[0xE1],0x1
(0053) 	M8C_EnableIntMask(INT_MSK1, INT_MSK1_DBB11);
    09EE: 43 E1 20 OR    REG[0xE1],0x20
(0054) 	
(0055) 	//enable the positive edge and falling edge paramers
(0056) 	ENC1A_PEDGE_Start();
    09F1: 10       PUSH  X
    09F2: 7C 09 A2 LCALL _ENC1A_PEDGE_Start
(0057) 	ENC1B_PEDGE_Start();
    09F5: 7C 09 59 LCALL _ENC1B_PEDGE_Start
(0058) 	ENC1A_FEDGE_Start();
    09F8: 7C 09 B2 LCALL _ENC1A_FEDGE_Start
(0059) 	ENC1B_FEDGE_Start();
    09FB: 7C 09 6A LCALL _ENC1B_FEDGE_Start
(0060) 	
(0061) 	//enable the falling edge and positive edge interrupts for Encoder 1
(0062) 	ENC1A_PEDGE_EnableInt();
    09FE: 7C 09 9A LCALL _ENC1A_PEDGE_EnableInt
(0063) 	ENC1B_PEDGE_EnableInt();
    0A01: 7C 09 51 LCALL _ENC1B_PEDGE_EnableInt
(0064) 	ENC1A_FEDGE_EnableInt();
    0A04: 7C 09 AA LCALL _ENC1A_FEDGE_EnableInt
(0065) 	ENC1B_FEDGE_EnableInt();
    0A07: 7C 09 62 LCALL _ENC1B_FEDGE_EnableInt
(0066) 	
(0067) 	//Start motor speed PWMs
(0068) 	PWMA_Start();
    0A0A: 7C 09 13 LCALL _PWMA_Start
(0069) 	PWMB_Start();
    0A0D: 7C 08 CC LCALL _PWMB_Start
(0070) 	
(0071) 	//Start servos
(0072) 	ServoA_Start();
    0A10: 7C 08 6F LCALL _ServoA_Start
(0073) 	
(0074) 	//start the UART
(0075) 	UART_CmdReset();  // Reset command paramer  
    0A13: 7C 07 CE LCALL _UART_CmdReset
(0076) 	UART_IntCntl(UART_ENABLE_RX_INT);
    0A16: 50 01    MOV   A,0x1
    0A18: 7C 06 CB LCALL _UART_IntCntl
(0077) 	UART_Start(UART_PARITY_NONE);
    0A1B: 50 00    MOV   A,0x0
    0A1D: 7C 06 9C LCALL _UART_Start
(0078) 	//UART_EnableInt();
(0079) 	
(0080) 	UART_CPutString("KIPR bots roll out!");
    0A20: 50 02    MOV   A,0x2
    0A22: 08       PUSH  A
    0A23: 50 9D    MOV   A,0x9D
    0A25: 5C       MOV   X,A
    0A26: 18       POP   A
    0A27: 7C 07 B3 LCALL _UART_CPutString
(0081) 	UART_PutCRLF();
    0A2A: 7C 07 C5 LCALL _UART_PutCRLF
    0A2D: 20       POP   X
    0A2E: 80 9C    JMP   0x0ACB
(0082) 	
(0083) 	while(1)
(0084) 	{
(0085) 		prevPrt1 = (ENC1A_Data_ADDR & (ENC1A_MASK | ENC1B_MASK));
    0A30: 5D 08    MOV   A,REG[0x8]
    0A32: 21 50    AND   A,0x50
    0A34: 62 D0 00 MOV   REG[0xD0],0x0
    0A37: 53 29    MOV   [prevPrt1],A
(0086) 		prevPrt2 = (ENC2A_Data_ADDR & (ENC2A_MASK | ENC2B_MASK));
    0A39: 5D 08    MOV   A,REG[0x8]
    0A3B: 21 28    AND   A,0x28
    0A3D: 62 D0 00 MOV   REG[0xD0],0x0
    0A40: 53 27    MOV   [prevPrt2],A
(0087) 		
(0088) 		if(UART_bCmdCheck())
    0A42: 10       PUSH  X
    0A43: 7C 07 E4 LCALL _UART_bCmdCheck
    0A46: 20       POP   X
    0A47: 62 D0 00 MOV   REG[0xD0],0x0
    0A4A: 39 00    CMP   A,0x0
    0A4C: A0 79    JZ    0x0AC6
(0089) 		{
(0090) 			if(data = UART_szGetParam()) 
    0A4E: 10       PUSH  X
    0A4F: 7C 07 FD LCALL _UART_szGetParam
    0A52: 62 D0 00 MOV   REG[0xD0],0x0
    0A55: 53 1A    MOV   [__r0],A
    0A57: 5A 19    MOV   [__r1],X
    0A59: 20       POP   X
    0A5A: 51 19    MOV   A,[__r1]
    0A5C: 54 01    MOV   [X+1],A
    0A5E: 51 1A    MOV   A,[__r0]
    0A60: 54 00    MOV   [X+0],A
    0A62: 3C 1A 00 CMP   [__r0],0x0
    0A65: B0 06    JNZ   0x0A6C
    0A67: 3C 19 00 CMP   [__r1],0x0
    0A6A: A0 5B    JZ    0x0AC6
(0091) 			{
(0092) 				command = *data;
    0A6C: 62 D0 00 MOV   REG[0xD0],0x0
    0A6F: 52 01    MOV   A,[X+1]
    0A71: 53 19    MOV   [__r1],A
    0A73: 52 00    MOV   A,[X+0]
    0A75: 60 D4    MOV   REG[0xD4],A
    0A77: 3E 19    MVI   A,[__r1]
    0A79: 54 04    MOV   [X+4],A
    0A7B: 80 1C    JMP   0x0A98
(0093) 				
(0094) 				while (data = UART_szGetParam())
(0095) 				{
(0096) 					*param = *data;
    0A7D: 62 D0 00 MOV   REG[0xD0],0x0
    0A80: 52 01    MOV   A,[X+1]
    0A82: 53 19    MOV   [__r1],A
    0A84: 52 00    MOV   A,[X+0]
    0A86: 60 D4    MOV   REG[0xD4],A
    0A88: 3E 19    MVI   A,[__r1]
    0A8A: 53 1A    MOV   [__r0],A
    0A8C: 52 03    MOV   A,[X+3]
    0A8E: 53 17    MOV   [__r3],A
    0A90: 52 02    MOV   A,[X+2]
    0A92: 60 D5    MOV   REG[0xD5],A
    0A94: 51 1A    MOV   A,[__r0]
    0A96: 3F 17    MVI   [__r3],A
(0097) 				}
    0A98: 10       PUSH  X
    0A99: 7C 07 FD LCALL _UART_szGetParam
    0A9C: 62 D0 00 MOV   REG[0xD0],0x0
    0A9F: 53 1A    MOV   [__r0],A
    0AA1: 5A 19    MOV   [__r1],X
    0AA3: 20       POP   X
    0AA4: 51 19    MOV   A,[__r1]
    0AA6: 54 01    MOV   [X+1],A
    0AA8: 51 1A    MOV   A,[__r0]
    0AAA: 54 00    MOV   [X+0],A
    0AAC: 3C 1A 00 CMP   [__r0],0x0
    0AAF: BF CD    JNZ   0x0A7D
    0AB1: 3C 19 00 CMP   [__r1],0x0
    0AB4: BF C8    JNZ   0x0A7D
(0098) 				action(command, param, 1);
    0AB6: 50 01    MOV   A,0x1
    0AB8: 08       PUSH  A
    0AB9: 52 02    MOV   A,[X+2]
    0ABB: 08       PUSH  A
    0ABC: 52 03    MOV   A,[X+3]
    0ABE: 08       PUSH  A
    0ABF: 52 04    MOV   A,[X+4]
    0AC1: 08       PUSH  A
    0AC2: 90 18    CALL  _action
    0AC4: 38 FC    ADD   SP,0xFC
(0099) 			}
(0100) 		}
(0101) 		
(0102) 		UART_CmdReset();  // Reset command paramer  
    0AC6: 10       PUSH  X
    0AC7: 7C 07 CE LCALL _UART_CmdReset
    0ACA: 20       POP   X
(0103) 	}
    0ACB: 8F 64    JMP   0x0A30
    0ACD: 38 FB    ADD   SP,0xFB
    0ACF: 20       POP   X
    0AD0: 8F FF    JMP   0x0AD0
(0104) }
(0105) 
(0106) int getVelocity(void)
(0107) {
(0108) 	return 0;	
_getVelocity:
    0AD2: 62 D0 00 MOV   REG[0xD0],0x0
    0AD5: 55 19 00 MOV   [__r1],0x0
    0AD8: 55 1A 00 MOV   [__r0],0x0
    0ADB: 7F       RET   
(0109) }
(0110) 
(0111) void action(char command, char* param, BOOL debug)
(0112) {	
_action:
  debug                --> X-7
  param                --> X-6
  command              --> X-4
    0ADC: 10       PUSH  X
    0ADD: 4F       MOV   X,SP
    0ADE: 38 02    ADD   SP,0x2
(0113) 	if (debug)
    0AE0: 3D F9 00 CMP   [X-7],0x0
    0AE3: A0 2B    JZ    0x0B0F
(0114) 	{
(0115) 		UART_PutString(&command);
    0AE5: 62 D0 00 MOV   REG[0xD0],0x0
    0AE8: 5A 19    MOV   [__r1],X
    0AEA: 16 19 04 SUB   [__r1],0x4
    0AED: 10       PUSH  X
    0AEE: 50 07    MOV   A,0x7
    0AF0: 08       PUSH  A
    0AF1: 51 19    MOV   A,[__r1]
    0AF3: 5C       MOV   X,A
    0AF4: 18       POP   A
    0AF5: 7C 07 4D LCALL _UART_PutString
(0116) 		UART_CPutString(" ");
    0AF8: 50 02    MOV   A,0x2
    0AFA: 08       PUSH  A
    0AFB: 50 9B    MOV   A,0x9B
    0AFD: 5C       MOV   X,A
    0AFE: 18       POP   A
    0AFF: 7C 07 B3 LCALL _UART_CPutString
    0B02: 20       POP   X
(0117) 		UART_PutString(param);
    0B03: 10       PUSH  X
    0B04: 52 FA    MOV   A,[X-6]
    0B06: 08       PUSH  A
    0B07: 52 FB    MOV   A,[X-5]
    0B09: 5C       MOV   X,A
    0B0A: 18       POP   A
    0B0B: 7C 07 4D LCALL _UART_PutString
    0B0E: 20       POP   X
(0118) 	}
(0119) 	
(0120) 	switch (command)
    0B0F: 52 FC    MOV   A,[X-4]
    0B11: 54 01    MOV   [X+1],A
    0B13: 56 00 00 MOV   [X+0],0x0
    0B16: 82 23    JMP   0x0D3A
(0121) 	{
(0122) 		MAV:
(0123) 			if (debug)
    0B18: 3D F9 00 CMP   [X-7],0x0
    0B1B: A2 2A    JZ    0x0D46
(0124) 			{
(0125) 				UART_CPutString("Setting velocity to: ");
    0B1D: 10       PUSH  X
    0B1E: 50 02    MOV   A,0x2
    0B20: 08       PUSH  A
    0B21: 50 85    MOV   A,0x85
    0B23: 5C       MOV   X,A
    0B24: 18       POP   A
    0B25: 7C 07 B3 LCALL _UART_CPutString
    0B28: 20       POP   X
(0126) 				UART_PutSHexInt(atoi(param));
    0B29: 52 FA    MOV   A,[X-6]
    0B2B: 08       PUSH  A
    0B2C: 52 FB    MOV   A,[X-5]
    0B2E: 08       PUSH  A
    0B2F: 7C 0E 36 LCALL _atoi
    0B32: 38 FE    ADD   SP,0xFE
    0B34: 10       PUSH  X
    0B35: 62 D0 00 MOV   REG[0xD0],0x0
    0B38: 51 1A    MOV   A,[__r0]
    0B3A: 08       PUSH  A
    0B3B: 51 19    MOV   A,[__r1]
    0B3D: 20       POP   X
    0B3E: 7C 07 09 LCALL _UART_PutSHexInt
    0B41: 20       POP   X
(0127) 			}
(0128) 			
(0129) 			break;
    0B42: 82 03    JMP   0x0D46
(0130) 		MOV:
(0131) 			if (debug)
    0B44: 3D F9 00 CMP   [X-7],0x0
    0B47: A1 FE    JZ    0x0D46
(0132) 			{
(0133) 				UART_CPutString("Setting PWM duty cycle to: ");
    0B49: 10       PUSH  X
    0B4A: 50 02    MOV   A,0x2
    0B4C: 08       PUSH  A
    0B4D: 50 69    MOV   A,0x69
    0B4F: 5C       MOV   X,A
    0B50: 18       POP   A
    0B51: 7C 07 B3 LCALL _UART_CPutString
    0B54: 20       POP   X
(0134) 				UART_PutSHexInt(atoi(param));
    0B55: 52 FA    MOV   A,[X-6]
    0B57: 08       PUSH  A
    0B58: 52 FB    MOV   A,[X-5]
    0B5A: 08       PUSH  A
    0B5B: 7C 0E 36 LCALL _atoi
    0B5E: 38 FE    ADD   SP,0xFE
    0B60: 10       PUSH  X
    0B61: 62 D0 00 MOV   REG[0xD0],0x0
    0B64: 51 1A    MOV   A,[__r0]
    0B66: 08       PUSH  A
    0B67: 51 19    MOV   A,[__r1]
    0B69: 20       POP   X
    0B6A: 7C 07 09 LCALL _UART_PutSHexInt
    0B6D: 20       POP   X
(0135) 			}
(0136) 			break;
    0B6E: 81 D7    JMP   0x0D46
(0137) 		GETV:
(0138) 			*param = 0;
    0B70: 62 D0 00 MOV   REG[0xD0],0x0
    0B73: 52 FB    MOV   A,[X-5]
    0B75: 53 19    MOV   [__r1],A
    0B77: 52 FA    MOV   A,[X-6]
    0B79: 60 D5    MOV   REG[0xD5],A
    0B7B: 50 00    MOV   A,0x0
    0B7D: 3F 19    MVI   [__r1],A
(0139) 			UART_PutString(itoa(param, getVelocity(), 10));
    0B7F: 9F 51    CALL  _getVelocity
    0B81: 50 00    MOV   A,0x0
    0B83: 08       PUSH  A
    0B84: 50 0A    MOV   A,0xA
    0B86: 08       PUSH  A
    0B87: 62 D0 00 MOV   REG[0xD0],0x0
    0B8A: 51 1A    MOV   A,[__r0]
    0B8C: 08       PUSH  A
    0B8D: 51 19    MOV   A,[__r1]
    0B8F: 08       PUSH  A
    0B90: 52 FA    MOV   A,[X-6]
    0B92: 08       PUSH  A
    0B93: 52 FB    MOV   A,[X-5]
    0B95: 08       PUSH  A
    0B96: 7C 0F 77 LCALL _itoa
    0B99: 38 FA    ADD   SP,0xFA
    0B9B: 10       PUSH  X
    0B9C: 62 D0 00 MOV   REG[0xD0],0x0
    0B9F: 51 1A    MOV   A,[__r0]
    0BA1: 08       PUSH  A
    0BA2: 51 19    MOV   A,[__r1]
    0BA4: 5C       MOV   X,A
    0BA5: 18       POP   A
    0BA6: 7C 07 4D LCALL _UART_PutString
    0BA9: 20       POP   X
(0140) 			break;
    0BAA: 81 9B    JMP   0x0D46
(0141) 		SRV0_POS:
(0142) 			if (debug)
    0BAC: 3D F9 00 CMP   [X-7],0x0
    0BAF: A0 26    JZ    0x0BD6
(0143) 			{
(0144) 				UART_CPutString("Setting servo 0 pulse width to: ");
    0BB1: 10       PUSH  X
    0BB2: 50 02    MOV   A,0x2
    0BB4: 08       PUSH  A
    0BB5: 50 48    MOV   A,0x48
    0BB7: 5C       MOV   X,A
    0BB8: 18       POP   A
    0BB9: 7C 07 B3 LCALL _UART_CPutString
    0BBC: 20       POP   X
(0145) 				UART_PutSHexInt(atoi(param));
    0BBD: 52 FA    MOV   A,[X-6]
    0BBF: 08       PUSH  A
    0BC0: 52 FB    MOV   A,[X-5]
    0BC2: 08       PUSH  A
    0BC3: 7C 0E 36 LCALL _atoi
    0BC6: 38 FE    ADD   SP,0xFE
    0BC8: 10       PUSH  X
    0BC9: 62 D0 00 MOV   REG[0xD0],0x0
    0BCC: 51 1A    MOV   A,[__r0]
    0BCE: 08       PUSH  A
    0BCF: 51 19    MOV   A,[__r1]
    0BD1: 20       POP   X
    0BD2: 7C 07 09 LCALL _UART_PutSHexInt
    0BD5: 20       POP   X
(0146) 			}
(0147) 			
(0148) 			ServoA_WritePulseWidth(atoi(param));
    0BD6: 52 FA    MOV   A,[X-6]
    0BD8: 08       PUSH  A
    0BD9: 52 FB    MOV   A,[X-5]
    0BDB: 08       PUSH  A
    0BDC: 7C 0E 36 LCALL _atoi
    0BDF: 38 FE    ADD   SP,0xFE
    0BE1: 10       PUSH  X
    0BE2: 62 D0 00 MOV   REG[0xD0],0x0
    0BE5: 51 1A    MOV   A,[__r0]
    0BE7: 08       PUSH  A
    0BE8: 51 19    MOV   A,[__r1]
    0BEA: 20       POP   X
    0BEB: 7C 08 7D LCALL _ServoA_WritePulseWidth
    0BEE: 20       POP   X
(0149) 			
(0150) 			break;
    0BEF: 81 56    JMP   0x0D46
(0151) 		SRV1_POS:
(0152) 			if (debug)
    0BF1: 3D F9 00 CMP   [X-7],0x0
    0BF4: A1 51    JZ    0x0D46
(0153) 			{
(0154) 				UART_CPutString("Setting servo 1 pulse width to: ");
    0BF6: 10       PUSH  X
    0BF7: 50 02    MOV   A,0x2
    0BF9: 08       PUSH  A
    0BFA: 50 27    MOV   A,0x27
    0BFC: 5C       MOV   X,A
    0BFD: 18       POP   A
    0BFE: 7C 07 B3 LCALL _UART_CPutString
    0C01: 20       POP   X
(0155) 				UART_PutSHexInt(atoi(param));
    0C02: 52 FA    MOV   A,[X-6]
    0C04: 08       PUSH  A
    0C05: 52 FB    MOV   A,[X-5]
    0C07: 08       PUSH  A
    0C08: 7C 0E 36 LCALL _atoi
    0C0B: 38 FE    ADD   SP,0xFE
    0C0D: 10       PUSH  X
    0C0E: 62 D0 00 MOV   REG[0xD0],0x0
    0C11: 51 1A    MOV   A,[__r0]
    0C13: 08       PUSH  A
    0C14: 51 19    MOV   A,[__r1]
    0C16: 20       POP   X
    0C17: 7C 07 09 LCALL _UART_PutSHexInt
    0C1A: 20       POP   X
(0156) 			}
(0157) 			
(0158) 			break;
    0C1B: 81 2A    JMP   0x0D46
(0159) 		SRV2_POS:
(0160) 			if (debug)
    0C1D: 3D F9 00 CMP   [X-7],0x0
    0C20: A1 25    JZ    0x0D46
(0161) 			{
(0162) 				UART_CPutString("Setting servo 2 pulse width to: ");
    0C22: 10       PUSH  X
    0C23: 50 02    MOV   A,0x2
    0C25: 08       PUSH  A
    0C26: 50 06    MOV   A,0x6
    0C28: 5C       MOV   X,A
    0C29: 18       POP   A
    0C2A: 7C 07 B3 LCALL _UART_CPutString
    0C2D: 20       POP   X
(0163) 				UART_PutSHexInt(atoi(param));
    0C2E: 52 FA    MOV   A,[X-6]
    0C30: 08       PUSH  A
    0C31: 52 FB    MOV   A,[X-5]
    0C33: 08       PUSH  A
    0C34: 7C 0E 36 LCALL _atoi
    0C37: 38 FE    ADD   SP,0xFE
    0C39: 10       PUSH  X
    0C3A: 62 D0 00 MOV   REG[0xD0],0x0
    0C3D: 51 1A    MOV   A,[__r0]
    0C3F: 08       PUSH  A
    0C40: 51 19    MOV   A,[__r1]
    0C42: 20       POP   X
    0C43: 7C 07 09 LCALL _UART_PutSHexInt
    0C46: 20       POP   X
(0164) 			}
(0165) 			
(0166) 			break;
    0C47: 80 FE    JMP   0x0D46
(0167) 		SRV3_POS:
(0168) 			if (debug)
    0C49: 3D F9 00 CMP   [X-7],0x0
    0C4C: A0 F9    JZ    0x0D46
(0169) 			{
(0170) 				UART_CPutString("Setting servo 3 pulse width to: ");
    0C4E: 10       PUSH  X
    0C4F: 50 01    MOV   A,0x1
    0C51: 08       PUSH  A
    0C52: 50 E5    MOV   A,0xE5
    0C54: 5C       MOV   X,A
    0C55: 18       POP   A
    0C56: 7C 07 B3 LCALL _UART_CPutString
    0C59: 20       POP   X
(0171) 				UART_PutSHexInt(atoi(param));
    0C5A: 52 FA    MOV   A,[X-6]
    0C5C: 08       PUSH  A
    0C5D: 52 FB    MOV   A,[X-5]
    0C5F: 08       PUSH  A
    0C60: 7C 0E 36 LCALL _atoi
    0C63: 38 FE    ADD   SP,0xFE
    0C65: 10       PUSH  X
    0C66: 62 D0 00 MOV   REG[0xD0],0x0
    0C69: 51 1A    MOV   A,[__r0]
    0C6B: 08       PUSH  A
    0C6C: 51 19    MOV   A,[__r1]
    0C6E: 20       POP   X
    0C6F: 7C 07 09 LCALL _UART_PutSHexInt
    0C72: 20       POP   X
(0172) 			}
(0173) 			
(0174) 			break;
    0C73: 80 D2    JMP   0x0D46
(0175) 		GETC1:
(0176) 			UART_PutSHexInt(count1);
    0C75: 62 D0 00 MOV   REG[0xD0],0x0
    0C78: 51 22    MOV   A,[count1+3]
    0C7A: 62 D0 00 MOV   REG[0xD0],0x0
    0C7D: 53 19    MOV   [__r1],A
    0C7F: 62 D0 00 MOV   REG[0xD0],0x0
    0C82: 51 21    MOV   A,[count1+2]
    0C84: 62 D0 00 MOV   REG[0xD0],0x0
    0C87: 10       PUSH  X
    0C88: 08       PUSH  A
    0C89: 51 19    MOV   A,[__r1]
    0C8B: 20       POP   X
    0C8C: 7C 07 09 LCALL _UART_PutSHexInt
    0C8F: 20       POP   X
(0177) 			break;
    0C90: 80 B5    JMP   0x0D46
(0178) 		GETC2:
(0179) 			UART_PutSHexInt(count2);
    0C92: 62 D0 00 MOV   REG[0xD0],0x0
    0C95: 51 1E    MOV   A,[count2+3]
    0C97: 62 D0 00 MOV   REG[0xD0],0x0
    0C9A: 53 19    MOV   [__r1],A
    0C9C: 62 D0 00 MOV   REG[0xD0],0x0
    0C9F: 51 1D    MOV   A,[count2+2]
    0CA1: 62 D0 00 MOV   REG[0xD0],0x0
    0CA4: 10       PUSH  X
    0CA5: 08       PUSH  A
    0CA6: 51 19    MOV   A,[__r1]
    0CA8: 20       POP   X
    0CA9: 7C 07 09 LCALL _UART_PutSHexInt
    0CAC: 20       POP   X
(0180) 			break;
    0CAD: 80 98    JMP   0x0D46
(0181) 		RSTC1:
(0182) 			if(debug)
    0CAF: 3D F9 00 CMP   [X-7],0x0
    0CB2: A0 1C    JZ    0x0CCF
(0183) 			{
(0184) 				UART_CPutString("Resetting count1");
    0CB4: 10       PUSH  X
    0CB5: 50 01    MOV   A,0x1
    0CB7: 08       PUSH  A
    0CB8: 50 D4    MOV   A,0xD4
    0CBA: 5C       MOV   X,A
    0CBB: 18       POP   A
    0CBC: 7C 07 B3 LCALL _UART_CPutString
    0CBF: 20       POP   X
(0185) 				count1 = 0;
    0CC0: 62 D0 00 MOV   REG[0xD0],0x0
    0CC3: 55 1F 00 MOV   [count1],0x0
    0CC6: 55 20 00 MOV   [count1+1],0x0
    0CC9: 55 21 00 MOV   [count1+2],0x0
    0CCC: 55 22 00 MOV   [count1+3],0x0
(0186) 			}
(0187) 			
(0188) 			count1 = 0;
    0CCF: 62 D0 00 MOV   REG[0xD0],0x0
    0CD2: 55 1F 00 MOV   [count1],0x0
    0CD5: 55 20 00 MOV   [count1+1],0x0
    0CD8: 55 21 00 MOV   [count1+2],0x0
    0CDB: 55 22 00 MOV   [count1+3],0x0
(0189) 			break;
    0CDE: 80 67    JMP   0x0D46
(0190) 		RSTC2:
(0191) 			if(debug)
    0CE0: 3D F9 00 CMP   [X-7],0x0
    0CE3: A0 1C    JZ    0x0D00
(0192) 			{
(0193) 				UART_CPutString("Resetting count2");
    0CE5: 10       PUSH  X
    0CE6: 50 01    MOV   A,0x1
    0CE8: 08       PUSH  A
    0CE9: 50 C3    MOV   A,0xC3
    0CEB: 5C       MOV   X,A
    0CEC: 18       POP   A
    0CED: 7C 07 B3 LCALL _UART_CPutString
    0CF0: 20       POP   X
(0194) 				count2 = 0;
    0CF1: 62 D0 00 MOV   REG[0xD0],0x0
    0CF4: 55 1B 00 MOV   [count2],0x0
    0CF7: 55 1C 00 MOV   [count2+1],0x0
    0CFA: 55 1D 00 MOV   [count2+2],0x0
    0CFD: 55 1E 00 MOV   [count2+3],0x0
(0195) 			}
(0196) 			
(0197) 			count2 = 0;
    0D00: 62 D0 00 MOV   REG[0xD0],0x0
    0D03: 55 1B 00 MOV   [count2],0x0
    0D06: 55 1C 00 MOV   [count2+1],0x0
    0D09: 55 1D 00 MOV   [count2+2],0x0
    0D0C: 55 1E 00 MOV   [count2+3],0x0
(0198) 			break;
    0D0F: 80 36    JMP   0x0D46
(0199) 		STOP:
(0200) 			if(debug)
    0D11: 3D F9 00 CMP   [X-7],0x0
    0D14: A0 17    JZ    0x0D2C
(0201) 			{
(0202) 				UART_CPutString("Stopping motors");
    0D16: 10       PUSH  X
    0D17: 50 01    MOV   A,0x1
    0D19: 08       PUSH  A
    0D1A: 50 B3    MOV   A,0xB3
    0D1C: 5C       MOV   X,A
    0D1D: 18       POP   A
    0D1E: 7C 07 B3 LCALL _UART_CPutString
(0203) 				PWMA_WritePulseWidth(0);
    0D21: 50 00    MOV   A,0x0
    0D23: 7C 09 1E LCALL _PWMA_WritePulseWidth
(0204) 				PWMB_WritePulseWidth(0);
    0D26: 50 00    MOV   A,0x0
    0D28: 7C 08 D7 LCALL _PWMB_WritePulseWidth
    0D2B: 20       POP   X
(0205) 			}
(0206) 			
(0207) 			PWMA_WritePulseWidth(0);
    0D2C: 10       PUSH  X
    0D2D: 50 00    MOV   A,0x0
    0D2F: 7C 09 1E LCALL _PWMA_WritePulseWidth
(0208) 			PWMB_WritePulseWidth(0);
    0D32: 50 00    MOV   A,0x0
    0D34: 7C 08 D7 LCALL _PWMB_WritePulseWidth
    0D37: 20       POP   X
(0209) 			break;
    0D38: 80 0D    JMP   0x0D46
(0210) 		default :
(0211) 			UART_CPutString("fu1337"); //error code
    0D3A: 10       PUSH  X
    0D3B: 50 01    MOV   A,0x1
    0D3D: 08       PUSH  A
    0D3E: 50 AC    MOV   A,0xAC
    0D40: 5C       MOV   X,A
    0D41: 18       POP   A
    0D42: 7C 07 B3 LCALL _UART_CPutString
    0D45: 20       POP   X
(0212) 			break;
    0D46: 38 FE    ADD   SP,0xFE
    0D48: 20       POP   X
    0D49: 7F       RET   
(0213) 	}
(0214) }
(0215) 
(0216) //Encoder 1 interrupts are generated by the falling edge and positive edge paramers.
(0217) void encoder1_ISR(void)
(0218) {
_encoder1_ISR:
    0D4A: 71 C0    OR    F,0xC0
    0D4C: 08       PUSH  A
    0D4D: 5D D0    MOV   A,REG[0xD0]
    0D4F: 08       PUSH  A
(0219) 	curPrt1 = (ENC1A_Data_ADDR & (ENC1A_MASK | ENC1B_MASK));
    0D50: 5D 08    MOV   A,REG[0x8]
    0D52: 21 50    AND   A,0x50
    0D54: 62 D0 00 MOV   REG[0xD0],0x0
    0D57: 53 25    MOV   [curPrt1],A
(0220) 		
(0221) 	if ((prevPrt1 == 0x00) && (curPrt1 == stateA1))
    0D59: 62 D0 00 MOV   REG[0xD0],0x0
    0D5C: 3C 29 00 CMP   [prevPrt1],0x0
    0D5F: B0 1A    JNZ   0x0D7A
    0D61: 62 D0 00 MOV   REG[0xD0],0x0
    0D64: 3C 25 20 CMP   [curPrt1],0x20
    0D67: B0 12    JNZ   0x0D7A
(0222) 	{
(0223) 		count1++;
    0D69: 62 D0 00 MOV   REG[0xD0],0x0
    0D6C: 06 22 01 ADD   [count1+3],0x1
    0D6F: 0E 21 00 ADC   [count1+2],0x0
    0D72: 0E 20 00 ADC   [count1+1],0x0
    0D75: 0E 1F 00 ADC   [count1],0x0
(0224) 	}
    0D78: 80 20    JMP   0x0D99
(0225) 	else if ((prevPrt1 == 0x00) && (curPrt1 == stateB1))
    0D7A: 62 D0 00 MOV   REG[0xD0],0x0
    0D7D: 3C 29 00 CMP   [prevPrt1],0x0
    0D80: B0 18    JNZ   0x0D99
    0D82: 62 D0 00 MOV   REG[0xD0],0x0
    0D85: 3C 25 08 CMP   [curPrt1],0x8
    0D88: B0 10    JNZ   0x0D99
(0226) 	{
(0227) 		count1--;
    0D8A: 62 D0 00 MOV   REG[0xD0],0x0
    0D8D: 16 22 01 SUB   [count1+3],0x1
    0D90: 1E 21 00 SBB   [count1+2],0x0
    0D93: 1E 20 00 SBB   [count1+1],0x0
    0D96: 1E 1F 00 SBB   [count1],0x0
(0228) 	}
    0D99: 18       POP   A
    0D9A: 60 D0    MOV   REG[0xD0],A
    0D9C: 18       POP   A
    0D9D: 7E       RETI  
(0229) }
(0230) 
(0231) //Encoder 2 interrupts are generated directly by the GPIO interrupt.
(0232) void encoder2_ISR(void)
(0233) {
_encoder2_ISR:
    0D9E: 71 C0    OR    F,0xC0
    0DA0: 08       PUSH  A
    0DA1: 5D D0    MOV   A,REG[0xD0]
    0DA3: 08       PUSH  A
(0234) 	curPrt2 = (ENC2A_Data_ADDR & (ENC2A_MASK | ENC2B_MASK));	
    0DA4: 5D 08    MOV   A,REG[0x8]
    0DA6: 21 28    AND   A,0x28
    0DA8: 62 D0 00 MOV   REG[0xD0],0x0
    0DAB: 53 28    MOV   [curPrt2],A
(0235) 		
(0236) 	if ((prevPrt2 == 0x00) && (curPrt2 == stateA2))	
    0DAD: 62 D0 00 MOV   REG[0xD0],0x0
    0DB0: 3C 27 00 CMP   [prevPrt2],0x0
    0DB3: B0 1A    JNZ   0x0DCE
    0DB5: 62 D0 00 MOV   REG[0xD0],0x0
    0DB8: 3C 28 10 CMP   [curPrt2],0x10
    0DBB: B0 12    JNZ   0x0DCE
(0237) 	{
(0238) 		count2++;
    0DBD: 62 D0 00 MOV   REG[0xD0],0x0
    0DC0: 06 1E 01 ADD   [count2+3],0x1
    0DC3: 0E 1D 00 ADC   [count2+2],0x0
    0DC6: 0E 1C 00 ADC   [count2+1],0x0
    0DC9: 0E 1B 00 ADC   [count2],0x0
(0239) 	}
    0DCC: 80 20    JMP   0x0DED
(0240) 	else if ((prevPrt2 == 0x00) && (curPrt2 == stateB2))
    0DCE: 62 D0 00 MOV   REG[0xD0],0x0
    0DD1: 3C 27 00 CMP   [prevPrt2],0x0
    0DD4: B0 18    JNZ   0x0DED
    0DD6: 62 D0 00 MOV   REG[0xD0],0x0
    0DD9: 3C 28 04 CMP   [curPrt2],0x4
    0DDC: B0 10    JNZ   0x0DED
(0241) 	{
(0242) 		count2--;
    0DDE: 62 D0 00 MOV   REG[0xD0],0x0
    0DE1: 16 1E 01 SUB   [count2+3],0x1
    0DE4: 1E 1D 00 SBB   [count2+2],0x0
    0DE7: 1E 1C 00 SBB   [count2+1],0x0
    0DEA: 1E 1B 00 SBB   [count2],0x0
(0243) 	}
    0DED: 18       POP   A
    0DEE: 60 D0    MOV   REG[0xD0],A
    0DF0: 18       POP   A
    0DF1: 7E       RETI  
