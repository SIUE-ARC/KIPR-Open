FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 04 CC LJMP  _encoder2_ISR      (0145)     ljmp _encoder2_ISR
001F: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 04 78 LJMP  _encoder1_ISR      (0149)     ljmp _encoder1_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 04 52 LJMP  _ServoA_ISR        (0157)     ljmp	_ServoA_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 04 54 LJMP  _PWMA_ISR          (0161)     ljmp	_PWMA_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
0034: 7D 04 78 LJMP  _encoder1_ISR      (0169)     ljmp _encoder1_ISR
0037: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
0038: 7D 03 DD LJMP  _UART_TX_ISR       (0173)     ljmp	_UART_TX_ISR
003B: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
003C: 7D 03 DE LJMP  _UART_RX_ISR       (0177)     ljmp	_UART_RX_ISR
003F: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
0040: 7D 04 53 LJMP  _PWMB_ISR          (0181)     ljmp	_PWMB_ISR
0043: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [prevPrt2+217],0x0 (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [prevPrt2+218],0x0 (0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 03 7B LCALL 0x037B             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 02    MOV   A,0x2              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 74    MOV   X,0x74             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 1B    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 1B    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 1B    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 1A    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 1B    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 1B FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 1A    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 1A    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 1B    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 1B FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 1A    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
0129: 43 E3 20 OR    REG[0xE3],0x20     (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
012C: 70 EF    AND   F,0xEF             
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012E: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
0131: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0133: 62 E0 03 MOV   REG[0xE0],0x3      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0136: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0139: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
013B: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013E: 7C 04 55 LCALL __UserModules_end|__text_start|_main|_main(0674)     lcall _main                    ; call main
                                        (0675) .Exit:
0141: 8F FF    JMP   0x0141             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0143: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0145: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
0276: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_kipr_2_Bank1
                                        (0019) export LoadConfigTBL_kipr_2_Bank0
                                        (0020) export LoadConfigTBL_kipr_2_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_kipr_2_Bank0:
                                        (0023) ;  Instance name ENC1A_BUF, User Module DigBuf
                                        (0024) ;       Instance name ENC1A_BUF, Block Name DigBuf(DBB00)
                                        (0025) 	db		23h, 03h		;ENC1A_BUF_CONTROL_REG(DBB00CR0)
                                        (0026) 	db		21h, 00h		;ENC1A_BUF_DATA_1_REG(DBB00DR1)
                                        (0027) 	db		22h, 00h		;ENC1A_BUF_DATA_2_REG(DBB00DR2)
                                        (0028) ;  Instance name ENC1B_BUF, User Module DigBuf
                                        (0029) ;       Instance name ENC1B_BUF, Block Name DigBuf(DBB11)
                                        (0030) 	db		37h, 03h		;ENC1B_BUF_CONTROL_REG(DBB11CR0)
                                        (0031) 	db		35h, 00h		;ENC1B_BUF_DATA_1_REG(DBB11DR1)
                                        (0032) 	db		36h, 00h		;ENC1B_BUF_DATA_2_REG(DBB11DR2)
                                        (0033) ;  Instance name PWMA, User Module PWM8
                                        (0034) ;       Instance name PWMA, Block Name PWM8(DCB03)
                                        (0035) 	db		2fh, 00h		;PWMA_CONTROL_REG(DCB03CR0)
                                        (0036) 	db		2dh, ffh		;PWMA_PERIOD_REG(DCB03DR1)
                                        (0037) 	db		2eh, 00h		;PWMA_COMPARE_REG(DCB03DR2)
                                        (0038) ;  Instance name PWMB, User Module PWM8
                                        (0039) ;       Instance name PWMB, Block Name PWM8(DBB20)
                                        (0040) 	db		43h, 00h		;PWMB_CONTROL_REG(DBB20CR0)
                                        (0041) 	db		41h, ffh		;PWMB_PERIOD_REG(DBB20DR1)
                                        (0042) 	db		42h, 00h		;PWMB_COMPARE_REG(DBB20DR2)
                                        (0043) ;  Instance name ServoA, User Module PWM16
                                        (0044) ;       Instance name ServoA, Block Name PWM16_LSB(DBB01)
                                        (0045) 	db		27h, 00h		;ServoA_CONTROL_LSB_REG(DBB01CR0)
                                        (0046) 	db		25h, 1fh		;ServoA_PERIOD_LSB_REG(DBB01DR1)
                                        (0047) 	db		26h, e7h		;ServoA_COMPARE_LSB_REG(DBB01DR2)
                                        (0048) ;       Instance name ServoA, Block Name PWM16_MSB(DCB02)
                                        (0049) 	db		2bh, 00h		;ServoA_CONTROL_MSB_REG(DCB02CR0)
                                        (0050) 	db		29h, 4eh		;ServoA_PERIOD_MSB_REG(DCB02DR1)
                                        (0051) 	db		2ah, 03h		;ServoA_COMPARE_MSB_REG(DCB02DR2)
                                        (0052) ;  Instance name UART, User Module UART
                                        (0053) ;       Instance name UART, Block Name RX(DCB13)
                                        (0054) 	db		3fh, 00h		;UART_RX_CONTROL_REG(DCB13CR0)
                                        (0055) 	db		3dh, 00h		;UART_(DCB13DR1)
                                        (0056) 	db		3eh, 00h		;UART_RX_BUFFER_REG (DCB13DR2)
                                        (0057) ;       Instance name UART, Block Name TX(DCB12)
                                        (0058) 	db		3bh, 00h		;UART_TX_CONTROL_REG(DCB12CR0)
                                        (0059) 	db		39h, 00h		;UART_TX_BUFFER_REG (DCB12DR1)
                                        (0060) 	db		3ah, 00h		;UART_(DCB12DR2)
                                        (0061) ;  Global Register values Bank 0
                                        (0062) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0063) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0064) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0065) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0066) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0067) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0068) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0069) 	db		b0h, 10h		; Row_0_InputMux register (RDI0RI)
                                        (0070) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0071) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0072) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0073) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0074) 	db		b5h, 01h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0075) 	db		b6h, 10h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0076) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0077) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0078) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0079) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0080) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0081) 	db		bdh, 10h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0082) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0083) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0084) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0085) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0086) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0087) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0088) 	db		c5h, 80h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0089) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0090) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0091) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0092) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0093) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0094) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0095) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0096) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0097) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0098) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0099) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0100) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0101) 	db		ffh
                                        (0102) LoadConfigTBL_kipr_2_Bank1:
                                        (0103) ;  Instance name ENC1A_BUF, User Module DigBuf
                                        (0104) ;       Instance name ENC1A_BUF, Block Name DigBuf(DBB00)
                                        (0105) 	db		20h, 22h		;ENC1A_BUF_FUNC_REG(DBB00FN)
                                        (0106) 	db		21h, e0h		;ENC1A_BUF_INPUT_REG(DBB00IN)
                                        (0107) 	db		22h, 40h		;ENC1A_BUF_OUTPUT_REG(DBB00OU)
                                        (0108) ;  Instance name ENC1B_BUF, User Module DigBuf
                                        (0109) ;       Instance name ENC1B_BUF, Block Name DigBuf(DBB11)
                                        (0110) 	db		34h, 22h		;ENC1B_BUF_FUNC_REG(DBB11FN)
                                        (0111) 	db		35h, c0h		;ENC1B_BUF_INPUT_REG(DBB11IN)
                                        (0112) 	db		36h, 40h		;ENC1B_BUF_OUTPUT_REG(DBB11OU)
                                        (0113) ;  Instance name PWMA, User Module PWM8
                                        (0114) ;       Instance name PWMA, Block Name PWM8(DCB03)
                                        (0115) 	db		2ch, 21h		;PWMA_FUNC_REG(DCB03FN)
                                        (0116) 	db		2dh, 16h		;PWMA_INPUT_REG(DCB03IN)
                                        (0117) 	db		2eh, 44h		;PWMA_OUTPUT_REG(DCB03OU)
                                        (0118) ;  Instance name PWMB, User Module PWM8
                                        (0119) ;       Instance name PWMB, Block Name PWM8(DBB20)
                                        (0120) 	db		40h, 21h		;PWMB_FUNC_REG(DBB20FN)
                                        (0121) 	db		41h, 11h		;PWMB_INPUT_REG(DBA20IN)
                                        (0122) 	db		42h, 45h		;PWMB_OUTPUT_REG(DBA20OU)
                                        (0123) ;  Instance name ServoA, User Module PWM16
                                        (0124) ;       Instance name ServoA, Block Name PWM16_LSB(DBB01)
                                        (0125) 	db		24h, 01h		;ServoA_FUNC_LSB_REG(DBB01FN)
                                        (0126) 	db		25h, 16h		;ServoA_INPUT_LSB_REG(DBB01IN)
                                        (0127) 	db		26h, 40h		;ServoA_OUTPUT_LSB_REG(DBB01OU)
                                        (0128) ;       Instance name ServoA, Block Name PWM16_MSB(DCB02)
                                        (0129) 	db		28h, 21h		;ServoA_FUNC_MSB_REG(DCB02FN)
                                        (0130) 	db		29h, 36h		;ServoA_INPUT_MSB_REG(DCB02IN)
                                        (0131) 	db		2ah, 47h		;ServoA_OUTPUT_MSB_REG(DCB02OU)
                                        (0132) ;  Instance name UART, User Module UART
                                        (0133) ;       Instance name UART, Block Name RX(DCB13)
                                        (0134) 	db		3ch, 05h		;UART_RX_FUNC_REG   (DCB13FN)
                                        (0135) 	db		3dh, f1h		;UART_RX_INPUT_REG  (DCB13IN)
                                        (0136) 	db		3eh, 00h		;UART_RX_OUTPUT_REG (DCB13OU)
                                        (0137) ;       Instance name UART, Block Name TX(DCB12)
                                        (0138) 	db		38h, 0dh		;UART_TX_FUNC_REG   (DCB12FN)
                                        (0139) 	db		39h, 01h		;UART_TX_INPUT_REG  (DCB12IN)
                                        (0140) 	db		3ah, 05h		;UART_TX_OUTPUT_REG (DCB12OU)
                                        (0141) ;  Global Register values Bank 1
                                        (0142) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0143) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0144) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0145) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0146) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0147) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0148) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0149) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0150) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0151) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0152) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0153) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0154) 	db		e1h, b1h		; OscillatorControl_1 register (OSC_CR1)
                                        (0155) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0156) 	db		dfh, 19h		; OscillatorControl_3 register (OSC_CR3)
                                        (0157) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0158) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0159) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0160) 	db		ffh
                                        (0161) AREA psoc_config(rom, rel)
                                        (0162) LoadConfigTBL_kipr_2_Ordered:
                                        (0163) ;  Ordered Global Register values
                                        (0164) 	M8C_SetBank0
0278: 62 00 00 MOV   REG[0x0],0x0       (0165) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
027B: 71 10    OR    F,0x10             
                                        (0166) 	M8C_SetBank1
027D: 62 00 0A MOV   REG[0x0],0xA       (0167) 	mov	reg[00h], 0ah		; Port_0_DriveMode_0 register (PRT0DM0)
0280: 62 01 F5 MOV   REG[0x1],0xF5      (0168) 	mov	reg[01h], f5h		; Port_0_DriveMode_1 register (PRT0DM1)
0283: 70 EF    AND   F,0xEF             
                                        (0169) 	M8C_SetBank0
0285: 62 03 F5 MOV   REG[0x3],0xF5      (0170) 	mov	reg[03h], f5h		; Port_0_DriveMode_2 register (PRT0DM2)
0288: 62 02 0A MOV   REG[0x2],0xA       (0171) 	mov	reg[02h], 0ah		; Port_0_GlobalSelect register (PRT0GS)
028B: 71 10    OR    F,0x10             
                                        (0172) 	M8C_SetBank1
028D: 62 02 00 MOV   REG[0x2],0x0       (0173) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0290: 62 03 00 MOV   REG[0x3],0x0       (0174) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0293: 70 EF    AND   F,0xEF             
                                        (0175) 	M8C_SetBank0
0295: 62 01 00 MOV   REG[0x1],0x0       (0176) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0298: 62 04 00 MOV   REG[0x4],0x0       (0177) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
029B: 71 10    OR    F,0x10             
                                        (0178) 	M8C_SetBank1
029D: 62 04 F0 MOV   REG[0x4],0xF0      (0179) 	mov	reg[04h], f0h		; Port_1_DriveMode_0 register (PRT1DM0)
02A0: 62 05 0F MOV   REG[0x5],0xF       (0180) 	mov	reg[05h], 0fh		; Port_1_DriveMode_1 register (PRT1DM1)
02A3: 70 EF    AND   F,0xEF             
                                        (0181) 	M8C_SetBank0
02A5: 62 07 0F MOV   REG[0x7],0xF       (0182) 	mov	reg[07h], 0fh		; Port_1_DriveMode_2 register (PRT1DM2)
02A8: 62 06 20 MOV   REG[0x6],0x20      (0183) 	mov	reg[06h], 20h		; Port_1_GlobalSelect register (PRT1GS)
02AB: 71 10    OR    F,0x10             
                                        (0184) 	M8C_SetBank1
02AD: 62 06 00 MOV   REG[0x6],0x0       (0185) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
02B0: 62 07 00 MOV   REG[0x7],0x0       (0186) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
02B3: 70 EF    AND   F,0xEF             
                                        (0187) 	M8C_SetBank0
02B5: 62 05 00 MOV   REG[0x5],0x0       (0188) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
02B8: 62 08 00 MOV   REG[0x8],0x0       (0189) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
02BB: 71 10    OR    F,0x10             
                                        (0190) 	M8C_SetBank1
02BD: 62 08 07 MOV   REG[0x8],0x7       (0191) 	mov	reg[08h], 07h		; Port_2_DriveMode_0 register (PRT2DM0)
02C0: 62 09 F8 MOV   REG[0x9],0xF8      (0192) 	mov	reg[09h], f8h		; Port_2_DriveMode_1 register (PRT2DM1)
02C3: 70 EF    AND   F,0xEF             
                                        (0193) 	M8C_SetBank0
02C5: 62 0B 08 MOV   REG[0xB],0x8       (0194) 	mov	reg[0bh], 08h		; Port_2_DriveMode_2 register (PRT2DM2)
02C8: 62 0A D1 MOV   REG[0xA],0xD1      (0195) 	mov	reg[0ah], d1h		; Port_2_GlobalSelect register (PRT2GS)
02CB: 71 10    OR    F,0x10             
                                        (0196) 	M8C_SetBank1
02CD: 62 0A 28 MOV   REG[0xA],0x28      (0197) 	mov	reg[0ah], 28h		; Port_2_IntCtrl_0 register (PRT2IC0)
02D0: 62 0B 28 MOV   REG[0xB],0x28      (0198) 	mov	reg[0bh], 28h		; Port_2_IntCtrl_1 register (PRT2IC1)
02D3: 70 EF    AND   F,0xEF             
                                        (0199) 	M8C_SetBank0
02D5: 62 09 28 MOV   REG[0x9],0x28      (0200) 	mov	reg[09h], 28h		; Port_2_IntEn register (PRT2IE)
02D8: 62 0C 00 MOV   REG[0xC],0x0       (0201) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
02DB: 71 10    OR    F,0x10             
                                        (0202) 	M8C_SetBank1
02DD: 62 0C 00 MOV   REG[0xC],0x0       (0203) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
02E0: 62 0D 00 MOV   REG[0xD],0x0       (0204) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
02E3: 70 EF    AND   F,0xEF             
                                        (0205) 	M8C_SetBank0
02E5: 62 0F 00 MOV   REG[0xF],0x0       (0206) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
02E8: 62 0E 00 MOV   REG[0xE],0x0       (0207) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
02EB: 71 10    OR    F,0x10             
                                        (0208) 	M8C_SetBank1
02ED: 62 0E 00 MOV   REG[0xE],0x0       (0209) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
02F0: 62 0F 00 MOV   REG[0xF],0x0       (0210) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
02F3: 70 EF    AND   F,0xEF             
                                        (0211) 	M8C_SetBank0
02F5: 62 0D 00 MOV   REG[0xD],0x0       (0212) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
02F8: 62 10 00 MOV   REG[0x10],0x0      (0213) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
02FB: 71 10    OR    F,0x10             
                                        (0214) 	M8C_SetBank1
02FD: 62 10 00 MOV   REG[0x10],0x0      (0215) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0300: 62 11 00 MOV   REG[0x11],0x0      (0216) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0303: 70 EF    AND   F,0xEF             
                                        (0217) 	M8C_SetBank0
0305: 62 13 00 MOV   REG[0x13],0x0      (0218) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0308: 62 12 00 MOV   REG[0x12],0x0      (0219) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
030B: 71 10    OR    F,0x10             
                                        (0220) 	M8C_SetBank1
030D: 62 12 00 MOV   REG[0x12],0x0      (0221) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0310: 62 13 00 MOV   REG[0x13],0x0      (0222) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0313: 70 EF    AND   F,0xEF             
                                        (0223) 	M8C_SetBank0
0315: 62 11 00 MOV   REG[0x11],0x0      (0224) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0318: 62 14 00 MOV   REG[0x14],0x0      (0225) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
031B: 71 10    OR    F,0x10             
                                        (0226) 	M8C_SetBank1
031D: 62 14 00 MOV   REG[0x14],0x0      (0227) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0320: 62 15 00 MOV   REG[0x15],0x0      (0228) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0323: 70 EF    AND   F,0xEF             
                                        (0229) 	M8C_SetBank0
0325: 62 17 00 MOV   REG[0x17],0x0      (0230) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0328: 62 16 00 MOV   REG[0x16],0x0      (0231) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
032B: 71 10    OR    F,0x10             
                                        (0232) 	M8C_SetBank1
032D: 62 16 00 MOV   REG[0x16],0x0      (0233) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0330: 62 17 00 MOV   REG[0x17],0x0      (0234) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0333: 70 EF    AND   F,0xEF             
                                        (0235) 	M8C_SetBank0
0335: 62 15 00 MOV   REG[0x15],0x0      (0236) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0338: 62 18 00 MOV   REG[0x18],0x0      (0237) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
033B: 71 10    OR    F,0x10             
                                        (0238) 	M8C_SetBank1
033D: 62 18 00 MOV   REG[0x18],0x0      (0239) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
0340: 62 19 00 MOV   REG[0x19],0x0      (0240) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
0343: 70 EF    AND   F,0xEF             
                                        (0241) 	M8C_SetBank0
0345: 62 1B 00 MOV   REG[0x1B],0x0      (0242) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0348: 62 1A 00 MOV   REG[0x1A],0x0      (0243) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
034B: 71 10    OR    F,0x10             
                                        (0244) 	M8C_SetBank1
034D: 62 1A 00 MOV   REG[0x1A],0x0      (0245) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0350: 62 1B 00 MOV   REG[0x1B],0x0      (0246) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
0353: 70 EF    AND   F,0xEF             
                                        (0247) 	M8C_SetBank0
0355: 62 19 00 MOV   REG[0x19],0x0      (0248) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0358: 62 1C 00 MOV   REG[0x1C],0x0      (0249) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
035B: 71 10    OR    F,0x10             
                                        (0250) 	M8C_SetBank1
035D: 62 1C 00 MOV   REG[0x1C],0x0      (0251) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0360: 62 1D 00 MOV   REG[0x1D],0x0      (0252) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0363: 70 EF    AND   F,0xEF             
                                        (0253) 	M8C_SetBank0
0365: 62 1F 00 MOV   REG[0x1F],0x0      (0254) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0368: 62 1E 00 MOV   REG[0x1E],0x0      (0255) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
036B: 71 10    OR    F,0x10             
                                        (0256) 	M8C_SetBank1
036D: 62 1E 00 MOV   REG[0x1E],0x0      (0257) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0370: 62 1F 00 MOV   REG[0x1F],0x0      (0258) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0373: 70 EF    AND   F,0xEF             
                                        (0259) 	M8C_SetBank0
0375: 62 1D 00 MOV   REG[0x1D],0x0      (0260) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0378: 70 EF    AND   F,0xEF             
                                        (0261) 	M8C_SetBank0
037A: 7F       RET                      (0262) 	ret
                                        (0263) 
                                        (0264) 
                                        (0265) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_kipr_2
                                        (0026) export _LoadConfig_kipr_2
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     
037B: 7C 03 82 LCALL 0x0382             (0058) 	lcall	LoadConfig_kipr_2
037E: 7C 02 76 LCALL 0x0276             (0059) 	lcall	LoadConfigTBL_kipr_2_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
0381: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration kipr_2
                                        (0067) ;
                                        (0068) ;    Load configuration registers for kipr_2.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_kipr_2:
                                        (0085)  LoadConfig_kipr_2:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
0382: 10       PUSH  X                  (0088) 	push	x
0383: 70 EF    AND   F,0xEF             
                                        (0089)     M8C_SetBank0                    ; Force bank 0
0385: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
0387: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
0388: 50 01    MOV   A,0x1              (0093)     mov     A, >LoadConfigTBL_kipr_2_Bank0
038A: 57 A0    MOV   X,0xA0             (0094)     mov     X, <LoadConfigTBL_kipr_2_Bank0
038C: 7C 03 9D LCALL 0x039D             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
038F: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
0391: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
0392: 50 02    MOV   A,0x2              (0100)     mov     A, >LoadConfigTBL_kipr_2_Bank1
0394: 57 1F    MOV   X,0x1F             (0101)     mov     X, <LoadConfigTBL_kipr_2_Bank1
0396: 7C 03 9D LCALL 0x039D             (0102)     lcall   LoadConfig              ; Load the bank 1 values
0399: 70 EF    AND   F,0xEF             
                                        (0103) 
                                        (0104)     M8C_SetBank0                    ; Force return to bank 0
039B: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
039C: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
039D: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
039F: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
03A0: 08       PUSH  A                  (0132)     push    A
03A1: 4F       MOV   X,SP               (0133)     mov     X, SP
03A2: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
03A5: D0 04    JNC   0x03AA             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
03A7: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
03AA: 18       POP   A                  (0138)     pop     A
03AB: 20       POP   X                  (0139)     pop     X
03AC: 70 EF    AND   F,0xEF             
03AE: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0140) 
                                        (0141) LoadConfigLp:
                                        (0142)     M8C_SetBank0                    ; Switch to bank 0
                                        (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
03B1: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
03B2: 08       PUSH  A                  (0145)     push    A
03B3: 28       ROMX                     (0146)     romx                            ; Load register address from table
03B4: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
03B6: A0 1F    JZ    0x03D6             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
03B8: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
03B9: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
03BC: A0 03    JZ    0x03C0             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
03BE: 71 10    OR    F,0x10             
                                        (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
03C0: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
03C2: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
03C3: 20       POP   X                  (0156)     pop     X
03C4: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
03C5: 09 00    ADC   A,0x0              (0158)     adc     A, 0
03C7: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
03C8: 08       PUSH  A                  (0160)     push    A
03C9: 28       ROMX                     (0161)     romx                            ; load config data from the table
03CA: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
03CB: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
03CD: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
03CF: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
03D0: 20       POP   X                  (0166)     pop     X
03D1: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
03D2: 09 00    ADC   A,0x0              (0168)     adc     A, 0
03D4: 8F D7    JMP   0x03AC             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
03D6: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
03D8: 70 3F    AND   F,0x3F             
03DA: 71 C0    OR    F,0xC0             
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
03DC: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175) AREA InterruptRAM(ram, rel)
                                        (0176) 
                                        (0177) NO_SHADOW:
                                        (0178) _NO_SHADOW:
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2014/7/14 at 8:16:55
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
03DD: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
03DE: 08       PUSH  A                  (0180)    push A
03DF: 10       PUSH  X                  (0181)    push X
03E0: 5D D3    MOV   A,REG[0xD3]        
03E2: 08       PUSH  A                  
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
03E3: 58 01    MOV   X,[0x1]            (0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
03E5: 5D 3F    MOV   A,REG[0x3F]        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
03E7: 08       PUSH  A                  (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
03E8: 21 08    AND   A,0x8              (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
03EA: B0 04    JNZ   0x03EF             (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
03EC: 18       POP   A                  (0193)    pop  A                                                  ; Restore stack
03ED: 80 5E    JMP   0x044C             (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
03EF: 18       POP   A                  (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
03F0: 21 E0    AND   A,0xE0             (0200)    and  A,UART_RX_ERROR
03F2: A0 12    JZ    0x0405             (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
03F4: 2C 00    OR    [0x0],A            (0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
03F6: 49 3E 00 TST   REG[0x3E],0x0      (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
03F9: 21 20    AND   A,0x20             (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
03FB: A0 50    JZ    0x044C             (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
03FD: 41 3F FE AND   REG[0x3F],0xFE     (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
0400: 43 3F 01 OR    REG[0x3F],0x1      (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
0403: 80 48    JMP   0x044C             (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
0405: 5D 3E    MOV   A,REG[0x3E]        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
0407: 47 00 01 TST   [0x0],0x1          (0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
040A: B0 41    JNZ   0x044C             (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
040C: 39 0D    CMP   A,0xD              (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
040E: B0 14    JNZ   0x0423             (0223)    jnz  .UARTRX_CHK_BACKSPACE
0410: 2E 00 01 OR    [0x0],0x1          (0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
0413: 62 D3 00 MOV   REG[0xD3],0x0      
0416: 70 3F    AND   F,0x3F             
0418: 71 80    OR    F,0x80             
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
041A: 56 02 00 MOV   [X+2],0x0          (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
041D: 70 3F    AND   F,0x3F             
041F: 71 00    OR    F,0x0              
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0421: 80 2A    JMP   0x044C             (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
0423: 39 20    CMP   A,0x20             (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
0425: C0 26    JC    0x044C             (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
0427: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
042A: 3C 01 0F CMP   [0x1],0xF          (0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
042D: C0 11    JC    0x043F             (0254)    jc   .UARTRX_ISR_GETDATA
042F: 70 3F    AND   F,0x3F             
0431: 71 80    OR    F,0x80             
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0433: 56 02 00 MOV   [X+2],0x0          (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
0436: 70 3F    AND   F,0x3F             
0438: 71 00    OR    F,0x0              
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
043A: 2E 00 10 OR    [0x0],0x10         (0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
043D: 80 0E    JMP   0x044C             (0259)    jmp  .RESTORE_IDX_PP
043F: 70 3F    AND   F,0x3F             
0441: 71 80    OR    F,0x80             
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0443: 54 02    MOV   [X+2],A            (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
0445: 70 3F    AND   F,0x3F             
0447: 71 00    OR    F,0x0              
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0449: 75       INC   X                  (0266)    inc  X                                                  ; Inc the pointer
044A: 5A 01    MOV   [0x1],X            (0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
044C: 18       POP   A                  
044D: 60 D3    MOV   REG[0xD3],A        
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
044F: 20       POP   X                  (0275)    pop  X
0450: 18       POP   A                  (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
0451: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\servoaint.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ServoAINT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2014/7/14 at 8:14:50
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "ServoA.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _ServoA_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _ServoA_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _ServoA_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0452: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file ServoAINT.asm
FILE: lib\pwmbint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWMBINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2014/7/14 at 8:14:50
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWMB.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWMB_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWMB_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWMB_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0453: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWMBINT.asm
FILE: lib\pwmaint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWMAINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2014/7/14 at 8:14:50
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWMA.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWMA_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWMA_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWMA_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0454: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWMAINT.asm
FILE: C:\Users\Hobo\DOCUME~1\PSOCDE~1.4PR\KIPR_2\KIPR_2\KIPR_2\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) 
(0008) #pragma interrupt_handler encoder1_ISR
(0009) #pragma interrupt_handler encoder2_ISR
(0010) 
(0011) #define stateA1 0x20
(0012) #define stateB1 0x08
(0013) #define stateA2 0x10
(0014) #define stateB2 0x04
(0015) 
(0016) BYTE curPrt1;
(0017) BYTE prevPrt1;
(0018) BYTE curPrt2;
(0019) BYTE prevPrt2;
(0020) 
(0021) signed long int count1 = 0;
(0022) signed long int count2 = 0;
(0023) 
(0024) void main(void)
(0025) {
(0026) 	M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
__UserModules_end|__text_start|_main|_main:
    0455: 71 01    OR    F,0x1
(0027) 	M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);
    0457: 43 E0 20 OR    REG[0xE0],0x20
(0028) 	M8C_EnableIntMask(INT_MSK1, INT_MSK1_DBB00);
    045A: 43 E1 01 OR    REG[0xE1],0x1
(0029) 	M8C_EnableIntMask(INT_MSK1, INT_MSK1_DBB11);
    045D: 43 E1 20 OR    REG[0xE1],0x20
    0460: 80 13    JMP   0x0474
(0030) 	
(0031) 	// Insert your main routine code here.
(0032) 	
(0033) 	while(1)
(0034) 	{
(0035) 		prevPrt1 = (ENC1A_Data_ADDR & (ENC1A_MASK | ENC1B_MASK));
    0462: 5D 08    MOV   A,REG[0x8]
    0464: 21 50    AND   A,0x50
    0466: 62 D0 00 MOV   REG[0xD0],0x0
    0469: 53 1D    MOV   [prevPrt1],A
(0036) 		prevPrt2 = (ENC2A_Data_ADDR & (ENC2A_MASK | ENC2B_MASK));
    046B: 5D 08    MOV   A,REG[0x8]
    046D: 21 28    AND   A,0x28
    046F: 62 D0 00 MOV   REG[0xD0],0x0
    0472: 53 1F    MOV   [prevPrt2],A
(0037) 	}
    0474: 8F ED    JMP   0x0462
    0476: 8F FF    JMP   0x0476
(0038) }
(0039) 
(0040) void encoder1_ISR(void)
(0041) {
_encoder1_ISR:
    0478: 71 C0    OR    F,0xC0
    047A: 08       PUSH  A
    047B: 5D D0    MOV   A,REG[0xD0]
    047D: 08       PUSH  A
(0042) 	curPrt1 = (ENC1A_Data_ADDR & (ENC1A_MASK | ENC1B_MASK));		// Setting prevPort to only bits 1[4] and 1[5]
    047E: 5D 08    MOV   A,REG[0x8]
    0480: 21 50    AND   A,0x50
    0482: 62 D0 00 MOV   REG[0xD0],0x0
    0485: 53 1E    MOV   [curPrt1],A
(0043) 																// of PRT1DR
(0044) 		
(0045) 	if ((prevPrt1 == 0x00) && (curPrt1 == stateA1))	// If prevPort is 0x00 and then after the interrupt curPrt is
    0487: 62 D0 00 MOV   REG[0xD0],0x0
    048A: 3C 1D 00 CMP   [prevPrt1],0x0
    048D: B0 1A    JNZ   0x04A8
    048F: 62 D0 00 MOV   REG[0xD0],0x0
    0492: 3C 1E 20 CMP   [curPrt1],0x20
    0495: B0 12    JNZ   0x04A8
(0046) 												// 0x10 then A is high and B is low which means you wanted to
(0047) 												// increment by turning clockwise and hitting a rising edge on A
(0048) 	{
(0049) 		// Increasing the count when clockwise turn interrupt occurred
(0050) 		count1++;
    0497: 62 D0 00 MOV   REG[0xD0],0x0
    049A: 06 15 01 ADD   [count1+3],0x1
    049D: 0E 14 00 ADC   [count1+2],0x0
    04A0: 0E 13 00 ADC   [count1+1],0x0
    04A3: 0E 12 00 ADC   [count1],0x0
(0051) 	}
    04A6: 80 20    JMP   0x04C7
(0052) 	else if ((prevPrt1 == 0x00) && (curPrt1 == stateB1))	// If prevPort is 0x00 and then after the interrupt curPrt is
    04A8: 62 D0 00 MOV   REG[0xD0],0x0
    04AB: 3C 1D 00 CMP   [prevPrt1],0x0
    04AE: B0 18    JNZ   0x04C7
    04B0: 62 D0 00 MOV   REG[0xD0],0x0
    04B3: 3C 1E 08 CMP   [curPrt1],0x8
    04B6: B0 10    JNZ   0x04C7
(0053) 													// 0x20 then B is high and A is low which means you wanted to
(0054) 													// decrement by turning counterclockwise and hitting 
(0055) 													// a rising edge on B
(0056) 	{
(0057) 		// Decreasing the count when the counterclockwise interrupt occurred
(0058) 		count1--;
    04B8: 62 D0 00 MOV   REG[0xD0],0x0
    04BB: 16 15 01 SUB   [count1+3],0x1
    04BE: 1E 14 00 SBB   [count1+2],0x0
    04C1: 1E 13 00 SBB   [count1+1],0x0
    04C4: 1E 12 00 SBB   [count1],0x0
(0059) 	}
    04C7: 18       POP   A
    04C8: 60 D0    MOV   REG[0xD0],A
    04CA: 18       POP   A
    04CB: 7E       RETI  
(0060) }
(0061) 
(0062) 
(0063) void encoder2_ISR(void)
(0064) {
_encoder2_ISR:
    04CC: 71 C0    OR    F,0xC0
    04CE: 08       PUSH  A
    04CF: 5D D0    MOV   A,REG[0xD0]
    04D1: 08       PUSH  A
(0065) 	curPrt2 = (ENC2A_Data_ADDR & (ENC2A_MASK | ENC2B_MASK));		// Setting prevPort to only bits 1[4] and 1[5]
    04D2: 5D 08    MOV   A,REG[0x8]
    04D4: 21 28    AND   A,0x28
    04D6: 62 D0 00 MOV   REG[0xD0],0x0
    04D9: 53 1C    MOV   [curPrt2],A
(0066) 																// of PRT1DR
(0067) 		
(0068) 	if ((prevPrt2 == 0x00) && (curPrt2 == stateA2))	// If prevPort is 0x00 and then after the interrupt curPrt is
    04DB: 62 D0 00 MOV   REG[0xD0],0x0
    04DE: 3C 1F 00 CMP   [prevPrt2],0x0
    04E1: B0 1A    JNZ   0x04FC
    04E3: 62 D0 00 MOV   REG[0xD0],0x0
    04E6: 3C 1C 10 CMP   [curPrt2],0x10
    04E9: B0 12    JNZ   0x04FC
(0069) 												// 0x10 then A is high and B is low which means you wanted to
(0070) 												// increment by turning clockwise and hitting a rising edge on A
(0071) 	{
(0072) 		// Increasing the count when clockwise turn interrupt occurred
(0073) 		count2++;
    04EB: 62 D0 00 MOV   REG[0xD0],0x0
    04EE: 06 19 01 ADD   [count2+3],0x1
    04F1: 0E 18 00 ADC   [count2+2],0x0
    04F4: 0E 17 00 ADC   [count2+1],0x0
    04F7: 0E 16 00 ADC   [count2],0x0
(0074) 	}
    04FA: 80 20    JMP   0x051B
(0075) 	else if ((prevPrt2 == 0x00) && (curPrt2 == stateB2))	// If prevPort is 0x00 and then after the interrupt curPrt is
    04FC: 62 D0 00 MOV   REG[0xD0],0x0
    04FF: 3C 1F 00 CMP   [prevPrt2],0x0
    0502: B0 18    JNZ   0x051B
    0504: 62 D0 00 MOV   REG[0xD0],0x0
    0507: 3C 1C 04 CMP   [curPrt2],0x4
    050A: B0 10    JNZ   0x051B
(0076) 													// 0x20 then B is high and A is low which means you wanted to
(0077) 													// decrement by turning counterclockwise and hitting 
(0078) 													// a rising edge on B
(0079) 	{
(0080) 		// Decreasing the count when the counterclockwise interrupt occurred
(0081) 		count2--;
    050C: 62 D0 00 MOV   REG[0xD0],0x0
    050F: 16 19 01 SUB   [count2+3],0x1
    0512: 1E 18 00 SBB   [count2+2],0x0
    0515: 1E 17 00 SBB   [count2+1],0x0
    0518: 1E 16 00 SBB   [count2],0x0
(0082) 	}
    051B: 18       POP   A
    051C: 60 D0    MOV   REG[0xD0],A
    051E: 18       POP   A
    051F: 7E       RETI  
